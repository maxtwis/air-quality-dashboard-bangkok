/**
 * MCP Context Manager Tool Definitions
 * Based on AGENT-CODING-TEMPLATE.md documentation
 *
 * Core principle: MCP orchestrates AI agents to analyze and document codebases
 */
export const toolDefinitions = [
    {
        name: 'initialize_agent_workspace',
        description: 'Create agent-context folder with template files and instruct AI to analyze the codebase and update templates',
        inputSchema: {
            type: 'object',
            properties: {
                projectPath: {
                    type: 'string',
                    description: 'Path to the project directory'
                },
                projectName: {
                    type: 'string',
                    description: 'Name of the project'
                }
            },
            required: ['projectPath', 'projectName'],
        },
    },
    {
        name: 'check_before_suggesting',
        description: 'Instruct AI to verify that imports, methods, and patterns exist before using them',
        inputSchema: {
            type: 'object',
            properties: {
                imports: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'List of imports to verify'
                },
                methods: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'List of methods to verify'
                },
                patterns: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'List of patterns to verify (optional)'
                }
            },
            required: ['imports', 'methods'],
        },
    },
    {
        name: 'validate_generated_code',
        description: 'Instruct AI to validate generated code against project patterns and security requirements',
        inputSchema: {
            type: 'object',
            properties: {
                code: {
                    type: 'string',
                    description: 'The code to validate'
                },
                context: {
                    type: 'string',
                    description: 'Context about what the code does'
                },
                targetFile: {
                    type: 'string',
                    description: 'Target file path (optional)'
                }
            },
            required: ['code', 'context'],
        },
    },
    {
        name: 'get_pattern_for_task',
        description: 'Get the appropriate pattern template and instructions for a specific task type',
        inputSchema: {
            type: 'object',
            properties: {
                taskType: {
                    type: 'string',
                    enum: ['component', 'hook', 'service', 'api', 'test', 'error-handling'],
                    description: 'Type of task to get pattern for'
                },
                requirements: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Specific requirements for the pattern (optional)'
                }
            },
            required: ['taskType'],
        },
    },
    {
        name: 'track_agent_performance',
        description: 'Track AI agent performance metrics for continuous improvement',
        inputSchema: {
            type: 'object',
            properties: {
                featureName: {
                    type: 'string',
                    description: 'Name of the feature being implemented'
                },
                timestamp: {
                    type: 'string',
                    description: 'ISO timestamp of the implementation'
                },
                metrics: {
                    type: 'object',
                    properties: {
                        tokensUsed: { type: 'number' },
                        timeElapsed: { type: 'number' },
                        validationScore: { type: 'number' },
                        securityScore: { type: 'number' },
                        testCoverage: { type: 'number' },
                        hallucinations: {
                            type: 'object',
                            properties: {
                                detected: { type: 'number' },
                                prevented: { type: 'number' },
                                examples: {
                                    type: 'array',
                                    items: { type: 'string' }
                                }
                            }
                        },
                        errors: {
                            type: 'object',
                            properties: {
                                syntax: { type: 'number' },
                                runtime: { type: 'number' },
                                type: { type: 'number' }
                            }
                        }
                    },
                    required: ['tokensUsed', 'timeElapsed', 'validationScore', 'securityScore', 'testCoverage']
                }
            },
            required: ['featureName', 'timestamp', 'metrics'],
        },
    },
    {
        name: 'validate_context_completeness',
        description: 'Validate that all agent-context files are 100% complete with no placeholders remaining',
        inputSchema: {
            type: 'object',
            properties: {
                contextPath: {
                    type: 'string',
                    description: 'Path to the agent-context directory'
                },
                expectedCompleteness: {
                    type: 'number',
                    description: 'Expected completeness percentage (default: 100)',
                    default: 100
                }
            },
            required: ['contextPath'],
        },
    },
    {
        name: 'figma_to_code',
        description: 'Orchestrate AI agents to convert Figma designs to production-ready code with 10/10 quality. Default mode provides streamlined instruction for immediate execution with automated quality gates. Legacy phased approach available with useProductionMode:false. Achieves >95% visual fidelity, WCAG 2.1 AA compliance, and TypeScript strict mode.',
        inputSchema: {
            type: 'object',
            properties: {
                componentName: {
                    type: 'string',
                    description: 'Name for the component (optional - uses Figma selection if not provided)'
                },
                targetFramework: {
                    type: 'string',
                    enum: ['react', 'vue', 'angular'],
                    description: 'Target framework (default: react)'
                },
                targetLanguage: {
                    type: 'string',
                    enum: ['typescript', 'javascript'],
                    description: 'Target programming language (default: typescript)',
                    default: 'typescript'
                },
                styling: {
                    type: 'string',
                    enum: ['tailwind', 'css-modules', 'styled-components', 'css'],
                    description: 'Styling approach (default: tailwind)',
                    default: 'tailwind'
                },
                extractionMode: {
                    type: 'string',
                    enum: ['precise', 'adaptive'],
                    description: 'Precise: exact pixel values, Adaptive: framework-friendly values (default: precise)',
                    default: 'precise'
                },
                includeResponsive: {
                    type: 'boolean',
                    description: 'Include responsive design considerations (default: true)',
                    default: true
                },
                includeAccessibility: {
                    type: 'boolean',
                    description: 'Include accessibility attributes and guidelines (default: true)',
                    default: true
                },
                includeTests: {
                    type: 'boolean',
                    description: 'Generate test templates (default: false)',
                    default: false
                },
                processChildren: {
                    type: 'boolean',
                    description: 'Process entire component tree recursively (default: true)',
                    default: true
                },
                processingStrategy: {
                    type: 'string',
                    enum: ['depth-first', 'breadth-first'],
                    description: 'Tree traversal strategy (default: depth-first)',
                    default: 'depth-first'
                },
                componentFilter: {
                    type: 'object',
                    description: 'Filter components during tree processing',
                    properties: {
                        types: {
                            type: 'array',
                            items: { type: 'string' },
                            description: 'Only process specific component types'
                        },
                        maxDepth: {
                            type: 'number',
                            description: 'Maximum traversal depth'
                        },
                        excludePatterns: {
                            type: 'array',
                            items: { type: 'string' },
                            description: 'Skip components matching these patterns'
                        }
                    }
                },
                useProductionMode: {
                    type: 'boolean',
                    description: 'Use streamlined production-ready instruction (10/10 quality) instead of phased approach',
                    default: true
                }
            },
            required: [],
        },
    },
];
//# sourceMappingURL=tool-definitions.js.map