import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
const __dirname = dirname(fileURLToPath(import.meta.url));
/**
 * Create agent-context workspace with template files
 * This creates the structure, AI agents will fill in the content
 */
export async function createAgentWorkspace(projectPath, projectName) {
    const result = {
        success: false,
        filesCreated: [],
        message: '',
        nextInstructions: {
            analyze: '',
            update: ''
        }
    };
    try {
        // Create agent-context directory
        const agentContextDir = join(projectPath, 'agent-context');
        if (!existsSync(agentContextDir)) {
            mkdirSync(agentContextDir, { recursive: true });
        }
        // Create adr directory
        const adrDir = join(agentContextDir, 'adr');
        if (!existsSync(adrDir)) {
            mkdirSync(adrDir, { recursive: true });
        }
        // Copy template files from the package
        const templateFiles = [
            {
                source: '../../../AGENT-CODING-TEMPLATE.md',
                target: 'AGENT-CODING-TEMPLATE.md'
            },
            {
                source: '../../../AGENT-CONTEXT.md',
                target: 'AGENT-CONTEXT.md'
            },
            {
                source: '../../../AGENT-MEMORY.md',
                target: 'AGENT-MEMORY.md'
            },
            {
                source: '../../../.context7.yaml',
                target: '.context7.yaml'
            }
        ];
        // Copy template files
        for (const file of templateFiles) {
            const targetPath = join(agentContextDir, file.target);
            if (!existsSync(targetPath)) {
                try {
                    const content = readFileSync(join(__dirname, file.source), 'utf-8');
                    writeFileSync(targetPath, content);
                    result.filesCreated.push(file.target);
                }
                catch (e) {
                    console.warn(`Could not copy ${file.source}, creating from template`);
                    // Create a basic version if the source doesn't exist
                    const basicContent = createBasicTemplate(file.target, projectName);
                    writeFileSync(targetPath, basicContent);
                    result.filesCreated.push(file.target);
                }
            }
        }
        // Create CODEBASE-CONTEXT.md with clear placeholders
        const codebaseContextPath = join(agentContextDir, 'CODEBASE-CONTEXT.md');
        if (!existsSync(codebaseContextPath)) {
            const codebaseTemplate = createCodebaseContextTemplate(projectName);
            writeFileSync(codebaseContextPath, codebaseTemplate);
            result.filesCreated.push('CODEBASE-CONTEXT.md');
        }
        // Create DESIGN-SYSTEM.md for Figma tokens and component inventory
        const designSystemPath = join(agentContextDir, 'DESIGN-SYSTEM.md');
        if (!existsSync(designSystemPath)) {
            const designSystemTemplate = createDesignSystemTemplate(projectName);
            writeFileSync(designSystemPath, designSystemTemplate);
            result.filesCreated.push('DESIGN-SYSTEM.md');
        }
        // Create PRODUCT-REQUIREMENTS.md for user stories and NFRs
        const productRequirementsPath = join(agentContextDir, 'PRODUCT-REQUIREMENTS.md');
        if (!existsSync(productRequirementsPath)) {
            const productRequirementsTemplate = createProductRequirementsTemplate(projectName);
            writeFileSync(productRequirementsPath, productRequirementsTemplate);
            result.filesCreated.push('PRODUCT-REQUIREMENTS.md');
        }
        // Create ORG-CONTEXT.md for domain language and conventions
        const orgContextPath = join(agentContextDir, 'ORG-CONTEXT.md');
        if (!existsSync(orgContextPath)) {
            const orgContextTemplate = createOrgContextTemplate(projectName);
            writeFileSync(orgContextPath, orgContextTemplate);
            result.filesCreated.push('ORG-CONTEXT.md');
        }
        // Create ADR files
        const adrFiles = [
            {
                name: 'README.md',
                content: createADRReadme()
            },
            {
                name: '001-use-adr.md',
                content: createADR001()
            },
            {
                name: '002-tech-stack-selection.md',
                content: createADR002Template()
            },
            {
                name: '003-code-patterns.md',
                content: createADR003Template()
            },
            {
                name: 'adr-template.md',
                content: createADRTemplate()
            }
        ];
        for (const adr of adrFiles) {
            const adrPath = join(adrDir, adr.name);
            if (!existsSync(adrPath)) {
                writeFileSync(adrPath, adr.content);
                result.filesCreated.push(`adr/${adr.name}`);
            }
        }
        result.success = true;
        result.message = `✅ Created agent-context workspace with ${result.filesCreated.length} template files`;
        // Set next instructions for the AI agent
        result.nextInstructions.analyze = 'Now analyze the codebase comprehensively to understand all patterns and conventions.';
        result.nextInstructions.update = 'After analysis, update all template files in agent-context/ with the discovered information.';
    }
    catch (error) {
        result.success = false;
        result.message = `Failed to create workspace: ${error}`;
    }
    return result;
}
/**
 * Create basic template if source file is missing
 */
function createBasicTemplate(filename, projectName) {
    const templates = {
        'AGENT-CODING-TEMPLATE.md': `# AGENT-CODING-TEMPLATE.md

## 🤖 AI Agent Development Companion

This template guides AI agents in writing high-quality code for ${projectName}.

### Project Information
- **Name**: [PROJECT_NAME]
- **Language**: [DETECTED_LANGUAGE]
- **Framework**: [DETECTED_FRAMEWORK]

### Detected Patterns
[TO BE UPDATED AFTER ANALYSIS]

### Coding Standards
[TO BE UPDATED AFTER ANALYSIS]
`,
        'AGENT-CONTEXT.md': `# AGENT-CONTEXT.md

## 🔄 Real-Time Context Tracking

Current session context for ${projectName}.

### Session Info
- **Project**: [PROJECT_NAME]
- **Started**: [TIMESTAMP]
- **Status**: Active

### Current Patterns
[TO BE UPDATED AFTER ANALYSIS]
`,
        'AGENT-MEMORY.md': `# AGENT-MEMORY.md

## 🧠 Persistent Agent Memory

Learned patterns and experiences for ${projectName}.

### Verified Patterns
[TO BE UPDATED AFTER ANALYSIS]

### Framework Knowledge
[TO BE UPDATED AFTER ANALYSIS]
`,
        '.context7.yaml': `# Context7 Configuration
version: "1.0"
project: "[PROJECT_NAME]"

constraints:
  language: "[DETECTED_LANGUAGE]"
  framework: "[DETECTED_FRAMEWORK]"
  
patterns:
  # TO BE UPDATED AFTER ANALYSIS
  
validation:
  # TO BE UPDATED AFTER ANALYSIS
`
    };
    return templates[filename] || `# ${filename}\n\n[TO BE UPDATED AFTER ANALYSIS]`;
}
/**
 * Create CODEBASE-CONTEXT.md template
 */
function createCodebaseContextTemplate(projectName) {
    const timestamp = new Date().toISOString();
    return `# CODEBASE CONTEXT

**Generated**: ${timestamp}  
**Project**: ${projectName}  
**Status**: AWAITING AGENT ANALYSIS

## Project Context

**Type**: [TO BE DETERMINED AFTER ANALYSIS]  
**Description**: [TO BE UPDATED - What does this project do?]  
**Primary Language**: [TO BE DETECTED]  
**Framework**: [TO BE DETECTED]  
**Package Manager**: [TO BE DETECTED]

## Tech Stack & Versions

[TO BE UPDATED AFTER ANALYSIS]

- **Language**: [TO BE DETECTED]
- **Framework**: [TO BE DETECTED]
- **UI Library**: [TO BE DETECTED]
- **Testing**: [TO BE DETECTED]
- **Build Tool**: [TO BE DETECTED]
- **Package Manager**: [TO BE DETECTED]

### Key Dependencies
[TO BE DISCOVERED FROM PACKAGE.JSON]

## Code Patterns

[TO BE DISCOVERED AFTER ANALYSIS]

### Component Declaration Style
- [ ] Function declarations ([PERCENTAGE]% - [COUNT] components)
- [ ] Arrow functions ([PERCENTAGE]% - [COUNT] components)
- [ ] Class components ([PERCENTAGE]% - [COUNT] components)
- [ ] Other: [SPECIFY_IF_FOUND]

**Most Common Pattern Example:**
\`\`\`typescript
// File: [ACTUAL_FILE_PATH]
[ACTUAL_COMPONENT_CODE]
\`\`\`

### Import Style
- [ ] Named imports ([PERCENTAGE]% - [COUNT] occurrences)
- [ ] Default imports ([PERCENTAGE]% - [COUNT] occurrences)
- [ ] Namespace imports ([PERCENTAGE]% - [COUNT] occurrences)
- [ ] Dynamic imports ([PERCENTAGE]% - [COUNT] occurrences)

**Example:**
\`\`\`typescript
// File: [ACTUAL_FILE_PATH]
[ACTUAL_IMPORT_EXAMPLES]
\`\`\`

### State Management
- [ ] useState/useReducer ([COUNT] files)
- [ ] Redux ([COUNT] files)
- [ ] Zustand ([COUNT] files)
- [ ] MobX ([COUNT] files)
- [ ] Context API ([COUNT] files)
- [ ] Other: [SPECIFY_IF_FOUND]

**Example Usage:**
\`\`\`typescript
// File: [ACTUAL_FILE_PATH]
[ACTUAL_STATE_MANAGEMENT_CODE]
\`\`\`

### Styling Approach
- [ ] CSS Modules ([COUNT] files)
- [ ] Styled Components ([COUNT] files)
- [ ] Emotion ([COUNT] files)
- [ ] Tailwind CSS ([COUNT] files)
- [ ] Sass/SCSS ([COUNT] files)
- [ ] Plain CSS ([COUNT] files)

### Error Handling
**Patterns Found:**
- Try-Catch Blocks: [COUNT] occurrences
- Error Boundaries: [COUNT] components
- Error Logging: [DESCRIBE_APPROACH]

**Example:**
\`\`\`typescript
// File: [ACTUAL_FILE_PATH]
[ACTUAL_ERROR_HANDLING_CODE]
\`\`\`

## Naming Conventions

[TO BE MAPPED AFTER ANALYSIS]

- **Components**: [e.g., PascalCase]
- **Files**: [e.g., kebab-case]
- **Functions**: [e.g., camelCase]
- **Constants**: [e.g., UPPER_SNAKE_CASE]
- **Types/Interfaces**: [e.g., PascalCase]

## Directory Structure

\`\`\`
[TO BE MAPPED AFTER ANALYSIS]
\`\`\`

## Testing Strategy

**Framework**: [TO BE DETECTED]  
**Coverage Target**: [TO BE DETERMINED]  
**Test Structure**: [TO BE DISCOVERED]

## Security Considerations

[TO BE IDENTIFIED AFTER ANALYSIS]

## Performance Patterns

[TO BE DISCOVERED AFTER ANALYSIS]

## Development Workflow

[TO BE DOCUMENTED AFTER ANALYSIS]

---

*This file should be updated by the AI agent after analyzing the codebase.*
`;
}
/**
 * Create ADR README
 */
function createADRReadme() {
    return `# Architecture Decision Records (ADRs)

This directory contains Architecture Decision Records (ADRs) for the project.

## What is an ADR?

An Architecture Decision Record (ADR) is a document that captures an important architectural decision made along with its context and consequences.

## Index of ADRs

- [001-use-adr.md](001-use-adr.md) - Record architecture decisions
- [002-tech-stack-selection.md](002-tech-stack-selection.md) - Technology stack choices [TO BE UPDATED]
- [003-code-patterns.md](003-code-patterns.md) - Code patterns and conventions [TO BE UPDATED]

## Creating New ADRs

Use the [adr-template.md](adr-template.md) as a starting point for new ADRs.

## Status Key

- **Proposed**: The decision is being discussed
- **Accepted**: The decision has been agreed upon
- **Deprecated**: The decision is no longer relevant
- **Superseded**: The decision has been replaced by another ADR
`;
}
/**
 * Create ADR-001
 */
function createADR001() {
    const date = new Date().toISOString().split('T')[0];
    return `# ADR-001: Use Architecture Decision Records

**Date**: ${date}  
**Status**: Accepted

## Context

We need to record the architectural decisions made on this project to:
- Understand the reasoning behind past decisions
- Onboard new team members effectively
- Avoid repeatedly revisiting the same decisions
- Document the evolution of the architecture

## Decision

We will use Architecture Decision Records (ADRs) as described by Michael Nygard to document all significant architectural decisions.

## Consequences

### Positive
- Future developers understand the context of decisions
- Clear documentation of technical evolution
- Better onboarding for new team members
- Reduced time spent on revisiting decisions

### Negative
- Requires discipline to maintain
- Additional documentation overhead
- Need to decide what constitutes an "architectural decision"

## References

- [Michael Nygard's ADR article](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions)
- [ADR Tools](https://github.com/npryce/adr-tools)
`;
}
/**
 * Create ADR-002 template
 */
function createADR002Template() {
    const date = new Date().toISOString().split('T')[0];
    return `# ADR-002: Technology Stack Selection

**Date**: ${date}  
**Status**: Accepted

## Context

Document the technology choices for this project based on the codebase analysis.

## Decision

[TO BE UPDATED AFTER ANALYSIS]

### Core Technologies
- **Language**: [EXACT_LANGUAGE] v[VERSION]
- **Framework**: [EXACT_FRAMEWORK] v[VERSION]
- **UI Library**: [EXACT_UI_LIBRARY] v[VERSION]
- **State Management**: [EXACT_STATE_SOLUTION] v[VERSION]
- **Testing Framework**: [EXACT_TEST_FRAMEWORK] v[VERSION]
- **Build Tool**: [EXACT_BUILD_TOOL] v[VERSION]
- **Package Manager**: [npm|yarn|pnpm] v[VERSION]

### Key Dependencies (Top 10 by importance)
1. [DEPENDENCY_NAME] v[VERSION] - [PURPOSE]
2. [DEPENDENCY_NAME] v[VERSION] - [PURPOSE]
3. [DEPENDENCY_NAME] v[VERSION] - [PURPOSE]
4. [DEPENDENCY_NAME] v[VERSION] - [PURPOSE]
5. [DEPENDENCY_NAME] v[VERSION] - [PURPOSE]
6. [DEPENDENCY_NAME] v[VERSION] - [PURPOSE]
7. [DEPENDENCY_NAME] v[VERSION] - [PURPOSE]
8. [DEPENDENCY_NAME] v[VERSION] - [PURPOSE]
9. [DEPENDENCY_NAME] v[VERSION] - [PURPOSE]
10. [DEPENDENCY_NAME] v[VERSION] - [PURPOSE]

### Development Dependencies
[LIST_KEY_DEV_DEPENDENCIES]

## Rationale

[TO BE DOCUMENTED - Based on code patterns and package.json analysis]

### Framework Choice
- [WHY_THIS_FRAMEWORK]
- [BENEFITS_OBSERVED]

### State Management Choice
- [WHY_THIS_APPROACH]
- [PATTERNS_FOUND]

### Testing Strategy
- [WHY_THIS_FRAMEWORK]
- [COVERAGE_APPROACH]

## Consequences

### Positive
- [ACTUAL_BENEFIT_1]
- [ACTUAL_BENEFIT_2]
- [ACTUAL_BENEFIT_3]

### Negative
- [ACTUAL_LIMITATION_1]
- [ACTUAL_LIMITATION_2]
- [ACTUAL_CHALLENGE_1]

## Alternatives Considered

[CHECK_FOR_COMMENTED_DEPENDENCIES_OR_MIGRATION_NOTES]

---

*This ADR should be updated after analyzing the codebase to reflect actual technology choices.*
`;
}
/**
 * Create ADR-003 template
 */
function createADR003Template() {
    const date = new Date().toISOString().split('T')[0];
    return `# ADR-003: Code Patterns and Conventions

**Date**: ${date}  
**Status**: Accepted

## Context

Document the code patterns and conventions discovered in the codebase to ensure consistency.

## Discovered Patterns

[TO BE UPDATED AFTER ANALYSIS]

### Component Patterns
- **Declaration Style**: [MOST_COMMON_STYLE] ([PERCENTAGE]% of components)
- **File Organization**: [DESCRIBE_STRUCTURE]
- **Naming Convention**: [ACTUAL_NAMING_PATTERN]
- **Props Pattern**: [INTERFACE|TYPE|INLINE] ([PERCENTAGE]%)
- **Export Style**: [DEFAULT|NAMED] ([PERCENTAGE]%)

**Most Common Component Pattern:**
\`\`\`typescript
// File: [ACTUAL_FILE_PATH] (line [LINE_NUMBER])
[ACTUAL_COMPONENT_CODE_FROM_PROJECT]
\`\`\`

### State Management Patterns
- **Local State**: [HOOKS_PATTERN] in [COUNT] components
- **Global State**: [SOLUTION_USED] in [COUNT] files
- **Server State**: [APPROACH] in [COUNT] files

**Example:**
\`\`\`typescript
// File: [ACTUAL_FILE_PATH] (line [LINE_NUMBER])
[ACTUAL_STATE_CODE_FROM_PROJECT]
\`\`\`

### Error Handling Patterns
- **Async Operations**: [PATTERN_FOUND] ([COUNT] occurrences)
- **Error Boundaries**: [USED|NOT_USED] ([COUNT] components)
- **API Error Handling**: [DESCRIBE_PATTERN]
- **Form Validation**: [APPROACH_USED]

**Example:**
\`\`\`typescript
// File: [ACTUAL_FILE_PATH] (line [LINE_NUMBER])
[ACTUAL_ERROR_HANDLING_FROM_PROJECT]
\`\`\`

### Testing Patterns
- **Test Structure**: [DESCRIBE_PATTERN]
- **Naming Convention**: [ACTUAL_CONVENTION]
- **Mock Strategy**: [APPROACH_USED]
- **Coverage Focus**: [WHAT_IS_TESTED]

**Example Test:**
\`\`\`typescript
// File: [ACTUAL_TEST_FILE_PATH]
[ACTUAL_TEST_CODE_FROM_PROJECT]
\`\`\`

### API/Service Patterns
- **HTTP Client**: [LIBRARY_USED]
- **Request Pattern**: [DESCRIBE]
- **Response Handling**: [PATTERN]

**Example:**
\`\`\`typescript
// File: [ACTUAL_FILE_PATH] (line [LINE_NUMBER])
[ACTUAL_API_CODE_FROM_PROJECT]
\`\`\`

## Conventions

### Naming Conventions
[TO BE DOCUMENTED]

### File Structure
[TO BE DOCUMENTED]

### Import Organization
[TO BE DOCUMENTED]

## Rationale

[TO BE DOCUMENTED - Why these patterns?]

## Enforcement

- Code reviews should check for pattern compliance
- Linting rules should enforce conventions where possible
- New code should follow established patterns

---

*This ADR should be updated after analyzing the codebase to reflect actual patterns in use.*
`;
}
/**
 * Create ADR template
 */
function createADRTemplate() {
    return `# ADR-NNN: [Decision Title]

**Date**: YYYY-MM-DD  
**Status**: Proposed | Accepted | Deprecated | Superseded by ADR-NNN

## Context

What is the issue that we're seeing that motivates this decision or change?

## Decision

What is the change that we're proposing and/or doing?

## Rationale

Why is this the right decision? What are the principles behind it?

## Consequences

### Positive
- What becomes easier or more possible?
- What improvements do we expect?

### Negative
- What becomes more difficult?
- What are the trade-offs?

## Alternatives Considered

What other options did we consider? Why didn't we choose them?

## References

- Links to relevant documentation
- Related ADRs
- External resources
`;
}
/**
 * Create DESIGN-SYSTEM.md template
 */
function createDesignSystemTemplate(projectName) {
    const timestamp = new Date().toISOString();
    return `# DESIGN SYSTEM

**Generated**: ${timestamp}  
**Project**: ${projectName}  
**Status**: AWAITING FIGMA ANALYSIS

## 🎨 Design Tokens

### Color Palette
[TO BE EXTRACTED FROM FIGMA/CSS]

#### Primary Colors
- **Primary**: {{PRIMARY_COLOR}}
- **Primary Hover**: {{PRIMARY_HOVER_COLOR}}
- **Primary Active**: {{PRIMARY_ACTIVE_COLOR}}
- **Primary Disabled**: {{PRIMARY_DISABLED_COLOR}}

#### Secondary Colors
- **Secondary**: {{SECONDARY_COLOR}}
- **Secondary Hover**: {{SECONDARY_HOVER_COLOR}}
- **Secondary Active**: {{SECONDARY_ACTIVE_COLOR}}

#### Neutral Colors
- **Background**: {{BACKGROUND_COLOR}}
- **Surface**: {{SURFACE_COLOR}}
- **Border**: {{BORDER_COLOR}}
- **Text Primary**: {{TEXT_PRIMARY_COLOR}}
- **Text Secondary**: {{TEXT_SECONDARY_COLOR}}

#### Semantic Colors
- **Success**: {{SUCCESS_COLOR}}
- **Warning**: {{WARNING_COLOR}}
- **Error**: {{ERROR_COLOR}}
- **Info**: {{INFO_COLOR}}

### Typography
[TO BE EXTRACTED FROM FIGMA/CSS]

#### Font Families
- **Primary Font**: {{PRIMARY_FONT_FAMILY}}
- **Secondary Font**: {{SECONDARY_FONT_FAMILY}}
- **Monospace Font**: {{MONOSPACE_FONT_FAMILY}}

#### Font Sizes
\`\`\`css
--font-size-xs: {{FONT_SIZE_XS}};
--font-size-sm: {{FONT_SIZE_SM}};
--font-size-base: {{FONT_SIZE_BASE}};
--font-size-lg: {{FONT_SIZE_LG}};
--font-size-xl: {{FONT_SIZE_XL}};
--font-size-2xl: {{FONT_SIZE_2XL}};
--font-size-3xl: {{FONT_SIZE_3XL}};
\`\`\`

#### Line Heights
- **Tight**: {{LINE_HEIGHT_TIGHT}}
- **Normal**: {{LINE_HEIGHT_NORMAL}}
- **Relaxed**: {{LINE_HEIGHT_RELAXED}}

### Spacing System
[TO BE EXTRACTED FROM FIGMA/CSS]

\`\`\`css
--spacing-0: {{SPACING_0}};
--spacing-1: {{SPACING_1}};
--spacing-2: {{SPACING_2}};
--spacing-3: {{SPACING_3}};
--spacing-4: {{SPACING_4}};
--spacing-5: {{SPACING_5}};
--spacing-6: {{SPACING_6}};
--spacing-8: {{SPACING_8}};
--spacing-10: {{SPACING_10}};
--spacing-12: {{SPACING_12}};
--spacing-16: {{SPACING_16}};
--spacing-20: {{SPACING_20}};
--spacing-24: {{SPACING_24}};
\`\`\`

### Border Radius
\`\`\`css
--radius-none: {{RADIUS_NONE}};
--radius-sm: {{RADIUS_SM}};
--radius-base: {{RADIUS_BASE}};
--radius-md: {{RADIUS_MD}};
--radius-lg: {{RADIUS_LG}};
--radius-xl: {{RADIUS_XL}};
--radius-full: {{RADIUS_FULL}};
\`\`\`

### Shadows
[TO BE EXTRACTED FROM FIGMA]

\`\`\`css
--shadow-sm: {{SHADOW_SM}};
--shadow-base: {{SHADOW_BASE}};
--shadow-md: {{SHADOW_MD}};
--shadow-lg: {{SHADOW_LG}};
--shadow-xl: {{SHADOW_XL}};
\`\`\`

### Breakpoints
\`\`\`css
--breakpoint-sm: {{BREAKPOINT_SM}};
--breakpoint-md: {{BREAKPOINT_MD}};
--breakpoint-lg: {{BREAKPOINT_LG}};
--breakpoint-xl: {{BREAKPOINT_XL}};
--breakpoint-2xl: {{BREAKPOINT_2XL}};
\`\`\`

## 🧩 Component Inventory

### Atomic Components
[TO BE DISCOVERED FROM FIGMA/CODEBASE]

1. **Button**
   - Variants: {{BUTTON_VARIANTS}}
   - Sizes: {{BUTTON_SIZES}}
   - States: {{BUTTON_STATES}}

2. **Input**
   - Types: {{INPUT_TYPES}}
   - Sizes: {{INPUT_SIZES}}
   - States: {{INPUT_STATES}}

3. **Badge**
   - Variants: {{BADGE_VARIANTS}}
   - Sizes: {{BADGE_SIZES}}

4. **Icon**
   - Library: {{ICON_LIBRARY}}
   - Size System: {{ICON_SIZES}}

### Composite Components
[TO BE DISCOVERED]

1. **Card**
   - Variants: {{CARD_VARIANTS}}
   - Content Types: {{CARD_CONTENT_TYPES}}

2. **Modal**
   - Sizes: {{MODAL_SIZES}}
   - Animation: {{MODAL_ANIMATION}}

3. **Navigation**
   - Types: {{NAV_TYPES}}
   - Responsive Behavior: {{NAV_RESPONSIVE}}

### Layout Components
[TO BE DISCOVERED]

1. **Container**
   - Max Width: {{CONTAINER_MAX_WIDTH}}
   - Padding: {{CONTAINER_PADDING}}

2. **Grid**
   - Columns: {{GRID_COLUMNS}}
   - Gap: {{GRID_GAP}}

3. **Stack**
   - Direction: {{STACK_DIRECTION}}
   - Spacing: {{STACK_SPACING}}

## 🎭 Animation & Transitions

### Timing Functions
\`\`\`css
--ease-in: {{EASE_IN}};
--ease-out: {{EASE_OUT}};
--ease-in-out: {{EASE_IN_OUT}};
--ease-bounce: {{EASE_BOUNCE}};
\`\`\`

### Durations
\`\`\`css
--duration-fast: {{DURATION_FAST}};
--duration-normal: {{DURATION_NORMAL}};
--duration-slow: {{DURATION_SLOW}};
\`\`\`

## 📐 Visual Patterns

### Component Constraints
[TO BE EXTRACTED FROM FIGMA]

1. **Minimum Touch Target**: {{MIN_TOUCH_TARGET}}
2. **Maximum Line Length**: {{MAX_LINE_LENGTH}}
3. **Icon-Text Spacing**: {{ICON_TEXT_SPACING}}
4. **Component Padding Ratio**: {{COMPONENT_PADDING_RATIO}}

### Responsive Behavior
[TO BE ANALYZED]

1. **Mobile-First Breakpoints**: {{MOBILE_FIRST_APPROACH}}
2. **Fluid Typography**: {{FLUID_TYPOGRAPHY_SCALE}}
3. **Container Queries**: {{CONTAINER_QUERY_USAGE}}

## 🔍 Design-to-Code Mapping

### Figma Structure
[TO BE ANALYZED]

- **Page Organization**: {{FIGMA_PAGE_STRUCTURE}}
- **Component Naming**: {{FIGMA_NAMING_CONVENTION}}
- **Variant Properties**: {{FIGMA_VARIANT_SYSTEM}}
- **Auto-Layout Usage**: {{FIGMA_AUTOLAYOUT_PATTERNS}}

### Code Implementation
[TO BE MAPPED]

- **CSS Strategy**: {{CSS_STRATEGY}}
- **Component Library**: {{COMPONENT_LIBRARY}}
- **Token Implementation**: {{TOKEN_IMPLEMENTATION}}
- **Theme Provider**: {{THEME_PROVIDER}}

---

*This file should be updated after analyzing Figma designs and the existing codebase.*
`;
}
/**
 * Create PRODUCT-REQUIREMENTS.md template
 */
function createProductRequirementsTemplate(projectName) {
    const timestamp = new Date().toISOString();
    return `# PRODUCT REQUIREMENTS

**Generated**: ${timestamp}  
**Project**: ${projectName}  
**Status**: AWAITING REQUIREMENTS ANALYSIS

## 📋 Product Overview

### Vision Statement
{{PRODUCT_VISION}}

### Target Users
{{TARGET_USERS}}

### Key Objectives
1. {{OBJECTIVE_1}}
2. {{OBJECTIVE_2}}
3. {{OBJECTIVE_3}}

## 📖 User Stories

### Epic: {{EPIC_NAME_1}}
**Goal**: {{EPIC_GOAL_1}}

#### User Story 1.1: {{STORY_TITLE}}
**As a** {{USER_TYPE}}  
**I want to** {{USER_WANT}}  
**So that** {{USER_BENEFIT}}

**Acceptance Criteria:**
- [ ] {{ACCEPTANCE_CRITERION_1}}
- [ ] {{ACCEPTANCE_CRITERION_2}}
- [ ] {{ACCEPTANCE_CRITERION_3}}

**Technical Notes:**
- {{TECHNICAL_NOTE_1}}
- {{TECHNICAL_NOTE_2}}

#### User Story 1.2: {{STORY_TITLE}}
[TO BE POPULATED]

### Epic: {{EPIC_NAME_2}}
[TO BE POPULATED]

## 🎯 Non-Functional Requirements (NFRs)

### Performance
- **Page Load Time**: {{MAX_LOAD_TIME}}
- **Time to Interactive**: {{MAX_TTI}}
- **API Response Time**: {{MAX_API_RESPONSE}}
- **Bundle Size Budget**: {{MAX_BUNDLE_SIZE}}
- **Memory Usage**: {{MAX_MEMORY_USAGE}}

### Accessibility
- **WCAG Compliance**: {{WCAG_LEVEL}}
- **Screen Reader Support**: {{SCREEN_READER_REQUIREMENTS}}
- **Keyboard Navigation**: {{KEYBOARD_NAV_REQUIREMENTS}}
- **Color Contrast**: {{COLOR_CONTRAST_RATIO}}
- **Focus Management**: {{FOCUS_REQUIREMENTS}}

### Security
- **Authentication**: {{AUTH_REQUIREMENTS}}
- **Authorization**: {{AUTHZ_REQUIREMENTS}}
- **Data Encryption**: {{ENCRYPTION_REQUIREMENTS}}
- **API Security**: {{API_SECURITY_REQUIREMENTS}}
- **Content Security Policy**: {{CSP_REQUIREMENTS}}

### Browser Support
- **Chrome**: {{CHROME_VERSION}}+
- **Firefox**: {{FIREFOX_VERSION}}+
- **Safari**: {{SAFARI_VERSION}}+
- **Edge**: {{EDGE_VERSION}}+
- **Mobile Safari**: {{MOBILE_SAFARI_VERSION}}+
- **Chrome Android**: {{CHROME_ANDROID_VERSION}}+

### Internationalization
- **Languages**: {{SUPPORTED_LANGUAGES}}
- **RTL Support**: {{RTL_SUPPORT}}
- **Date/Time Format**: {{DATETIME_FORMAT}}
- **Currency Support**: {{CURRENCY_SUPPORT}}
- **Number Format**: {{NUMBER_FORMAT}}

## 🔄 Business Logic

### Domain Rules
[TO BE EXTRACTED FROM DOCUMENTATION]

1. **Rule**: {{BUSINESS_RULE_1}}
   - **Context**: {{RULE_CONTEXT_1}}
   - **Implementation**: {{RULE_IMPLEMENTATION_1}}

2. **Rule**: {{BUSINESS_RULE_2}}
   - **Context**: {{RULE_CONTEXT_2}}
   - **Implementation**: {{RULE_IMPLEMENTATION_2}}

### Validation Rules
[TO BE DOCUMENTED]

#### Form Validations
1. **{{FIELD_NAME_1}}**:
   - Required: {{IS_REQUIRED}}
   - Format: {{VALIDATION_FORMAT}}
   - Min/Max: {{MIN_MAX_VALUES}}

2. **{{FIELD_NAME_2}}**:
   - Required: {{IS_REQUIRED}}
   - Format: {{VALIDATION_FORMAT}}
   - Custom Rule: {{CUSTOM_VALIDATION}}

### State Machines
[TO BE DOCUMENTED IF APPLICABLE]

#### {{STATE_MACHINE_NAME}}
- **Initial State**: {{INITIAL_STATE}}
- **States**: {{ALL_STATES}}
- **Transitions**: {{STATE_TRANSITIONS}}

## 📊 Success Metrics

### Key Performance Indicators (KPIs)
1. **{{KPI_NAME_1}}**:
   - Target: {{KPI_TARGET_1}}
   - Measurement: {{KPI_MEASUREMENT_1}}

2. **{{KPI_NAME_2}}**:
   - Target: {{KPI_TARGET_2}}
   - Measurement: {{KPI_MEASUREMENT_2}}

### Analytics Events
[TO BE IMPLEMENTED]

1. **Event**: {{EVENT_NAME_1}}
   - **Trigger**: {{EVENT_TRIGGER_1}}
   - **Properties**: {{EVENT_PROPERTIES_1}}

2. **Event**: {{EVENT_NAME_2}}
   - **Trigger**: {{EVENT_TRIGGER_2}}
   - **Properties**: {{EVENT_PROPERTIES_2}}

## 🚦 Feature Flags

### Active Flags
[TO BE CONFIGURED]

1. **{{FLAG_NAME_1}}**:
   - Default: {{FLAG_DEFAULT_1}}
   - Description: {{FLAG_DESCRIPTION_1}}

2. **{{FLAG_NAME_2}}**:
   - Default: {{FLAG_DEFAULT_2}}
   - Description: {{FLAG_DESCRIPTION_2}}

## 📱 Responsive Requirements

### Mobile Specific
- **Touch Targets**: {{MIN_TOUCH_SIZE}}
- **Swipe Gestures**: {{SWIPE_SUPPORT}}
- **Device Orientation**: {{ORIENTATION_SUPPORT}}
- **Offline Support**: {{OFFLINE_REQUIREMENTS}}

### Desktop Specific
- **Hover States**: {{HOVER_REQUIREMENTS}}
- **Right-Click Menus**: {{CONTEXT_MENU_SUPPORT}}
- **Keyboard Shortcuts**: {{KEYBOARD_SHORTCUTS}}

## 🔗 External Integrations

### APIs
[TO BE DOCUMENTED]

1. **{{API_NAME_1}}**:
   - Endpoint: {{API_ENDPOINT_1}}
   - Authentication: {{API_AUTH_1}}
   - Rate Limits: {{API_RATE_LIMITS_1}}

2. **{{API_NAME_2}}**:
   - Endpoint: {{API_ENDPOINT_2}}
   - Authentication: {{API_AUTH_2}}
   - Rate Limits: {{API_RATE_LIMITS_2}}

### Third-Party Services
[TO BE DOCUMENTED]

1. **{{SERVICE_NAME_1}}**:
   - Purpose: {{SERVICE_PURPOSE_1}}
   - Integration Type: {{INTEGRATION_TYPE_1}}

---

*This file should be updated with actual product requirements, user stories, and NFRs.*
`;
}
/**
 * Create ORG-CONTEXT.md template
 */
function createOrgContextTemplate(projectName) {
    const timestamp = new Date().toISOString();
    return `# ORGANIZATION CONTEXT

**Generated**: ${timestamp}  
**Project**: ${projectName}  
**Status**: AWAITING ORGANIZATIONAL ANALYSIS

## 📚 Domain Glossary

### Business Terms
[TO BE POPULATED FROM DOCUMENTATION AND TEAM INPUT]

| Term | Definition | Context/Example |
|------|------------|-----------------|
| {{TERM_1}} | {{DEFINITION_1}} | {{EXAMPLE_1}} |
| {{TERM_2}} | {{DEFINITION_2}} | {{EXAMPLE_2}} |
| {{TERM_3}} | {{DEFINITION_3}} | {{EXAMPLE_3}} |
| {{TERM_4}} | {{DEFINITION_4}} | {{EXAMPLE_4}} |
| {{TERM_5}} | {{DEFINITION_5}} | {{EXAMPLE_5}} |

### Technical Terms
[ORGANIZATION-SPECIFIC TECHNICAL VOCABULARY]

| Term | Definition | Usage |
|------|------------|-------|
| {{TECH_TERM_1}} | {{TECH_DEFINITION_1}} | {{TECH_USAGE_1}} |
| {{TECH_TERM_2}} | {{TECH_DEFINITION_2}} | {{TECH_USAGE_2}} |
| {{TECH_TERM_3}} | {{TECH_DEFINITION_3}} | {{TECH_USAGE_3}} |

### Acronyms & Abbreviations
[TO BE DOCUMENTED]

| Acronym | Full Form | Context |
|---------|-----------|---------|
| {{ACRONYM_1}} | {{FULL_FORM_1}} | {{ACRONYM_CONTEXT_1}} |
| {{ACRONYM_2}} | {{FULL_FORM_2}} | {{ACRONYM_CONTEXT_2}} |
| {{ACRONYM_3}} | {{FULL_FORM_3}} | {{ACRONYM_CONTEXT_3}} |

## 📐 Naming Conventions

### Code Conventions
[TO BE EXTRACTED FROM CODEBASE AND TEAM STANDARDS]

#### Files & Directories
- **Components**: {{COMPONENT_NAMING_PATTERN}}
- **Utilities**: {{UTILITY_NAMING_PATTERN}}
- **Services**: {{SERVICE_NAMING_PATTERN}}
- **Tests**: {{TEST_NAMING_PATTERN}}
- **Styles**: {{STYLE_NAMING_PATTERN}}

#### Variables & Functions
- **Variables**: {{VARIABLE_NAMING_CONVENTION}}
- **Functions**: {{FUNCTION_NAMING_CONVENTION}}
- **Constants**: {{CONSTANT_NAMING_CONVENTION}}
- **Classes**: {{CLASS_NAMING_CONVENTION}}
- **Interfaces**: {{INTERFACE_NAMING_CONVENTION}}

#### Git Conventions
- **Branch Names**: {{BRANCH_NAMING_PATTERN}}
- **Commit Messages**: {{COMMIT_MESSAGE_FORMAT}}
- **PR Titles**: {{PR_TITLE_FORMAT}}
- **Tag Format**: {{TAG_FORMAT}}

### Database Conventions
[IF APPLICABLE]

- **Table Names**: {{TABLE_NAMING_CONVENTION}}
- **Column Names**: {{COLUMN_NAMING_CONVENTION}}
- **Index Names**: {{INDEX_NAMING_CONVENTION}}
- **Foreign Keys**: {{FK_NAMING_CONVENTION}}

## 🏢 Organization Standards

### Code Review Process
[TO BE DOCUMENTED]

1. **Review Requirements**:
   - {{REVIEW_REQUIREMENT_1}}
   - {{REVIEW_REQUIREMENT_2}}
   - {{REVIEW_REQUIREMENT_3}}

2. **Approval Criteria**:
   - {{APPROVAL_CRITERION_1}}
   - {{APPROVAL_CRITERION_2}}

### Documentation Standards
[TO BE DOCUMENTED]

- **Code Comments**: {{COMMENT_STANDARDS}}
- **README Format**: {{README_REQUIREMENTS}}
- **API Documentation**: {{API_DOC_FORMAT}}
- **Component Documentation**: {{COMPONENT_DOC_FORMAT}}

### Testing Requirements
[TO BE DOCUMENTED]

- **Unit Test Coverage**: {{UNIT_TEST_COVERAGE}}
- **Integration Tests**: {{INTEGRATION_TEST_REQUIREMENTS}}
- **E2E Tests**: {{E2E_TEST_REQUIREMENTS}}
- **Performance Tests**: {{PERF_TEST_REQUIREMENTS}}

## 🔗 External Systems

### Internal APIs
[TO BE DOCUMENTED]

1. **{{INTERNAL_API_1}}**:
   - Purpose: {{API_PURPOSE_1}}
   - Owner: {{API_OWNER_1}}
   - Documentation: {{API_DOCS_LINK_1}}

2. **{{INTERNAL_API_2}}**:
   - Purpose: {{API_PURPOSE_2}}
   - Owner: {{API_OWNER_2}}
   - Documentation: {{API_DOCS_LINK_2}}

### External Services
[TO BE DOCUMENTED]

1. **{{EXTERNAL_SERVICE_1}}**:
   - Type: {{SERVICE_TYPE_1}}
   - Integration Method: {{INTEGRATION_METHOD_1}}
   - Credentials Location: {{CREDS_LOCATION_1}}

2. **{{EXTERNAL_SERVICE_2}}**:
   - Type: {{SERVICE_TYPE_2}}
   - Integration Method: {{INTEGRATION_METHOD_2}}
   - Credentials Location: {{CREDS_LOCATION_2}}

## 📋 Compliance & Security

### Regulatory Requirements
[TO BE DOCUMENTED]

- **{{REGULATION_1}}**: {{REGULATION_REQUIREMENTS_1}}
- **{{REGULATION_2}}**: {{REGULATION_REQUIREMENTS_2}}

### Security Policies
[TO BE DOCUMENTED]

1. **Data Classification**:
   - Public: {{PUBLIC_DATA_EXAMPLES}}
   - Internal: {{INTERNAL_DATA_EXAMPLES}}
   - Confidential: {{CONFIDENTIAL_DATA_EXAMPLES}}

2. **Access Control**:
   - Authentication: {{AUTH_METHODS}}
   - Authorization: {{AUTHZ_MODEL}}
   - MFA Requirements: {{MFA_REQUIREMENTS}}

### Privacy Requirements
[TO BE DOCUMENTED]

- **PII Handling**: {{PII_REQUIREMENTS}}
- **Data Retention**: {{RETENTION_POLICY}}
- **Data Deletion**: {{DELETION_REQUIREMENTS}}
- **Consent Management**: {{CONSENT_REQUIREMENTS}}

## 🚀 Deployment & Infrastructure

### Environments
[TO BE DOCUMENTED]

1. **Development**:
   - URL: {{DEV_URL}}
   - Purpose: {{DEV_PURPOSE}}
   - Access: {{DEV_ACCESS}}

2. **Staging**:
   - URL: {{STAGING_URL}}
   - Purpose: {{STAGING_PURPOSE}}
   - Access: {{STAGING_ACCESS}}

3. **Production**:
   - URL: {{PROD_URL}}
   - Purpose: {{PROD_PURPOSE}}
   - Access: {{PROD_ACCESS}}

### CI/CD Pipeline
[TO BE DOCUMENTED]

- **Build System**: {{BUILD_SYSTEM}}
- **Test Automation**: {{TEST_AUTOMATION}}
- **Deployment Process**: {{DEPLOYMENT_PROCESS}}
- **Rollback Procedure**: {{ROLLBACK_PROCEDURE}}

## 👥 Team Structure

### Key Stakeholders
[TO BE DOCUMENTED]

| Role | Name | Responsibilities |
|------|------|------------------|
| {{ROLE_1}} | {{NAME_1}} | {{RESPONSIBILITIES_1}} |
| {{ROLE_2}} | {{NAME_2}} | {{RESPONSIBILITIES_2}} |
| {{ROLE_3}} | {{NAME_3}} | {{RESPONSIBILITIES_3}} |

### Communication Channels
[TO BE DOCUMENTED]

- **Slack Channels**: {{SLACK_CHANNELS}}
- **Email Lists**: {{EMAIL_LISTS}}
- **Meeting Cadence**: {{MEETING_SCHEDULE}}

---

*This file should be updated with organization-specific context, terminology, and standards.*
`;
}
//# sourceMappingURL=orchestration-workspace.js.map