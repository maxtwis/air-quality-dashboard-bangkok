export function generateFigmaInstructions(params) {
    // Always return the same essential instructions regardless of mode
    return `# ðŸŽ¯ FIGMA-TO-CODE: ESSENTIAL INSTRUCTIONS


## CORE OBJECTIVE
Convert Figma MCP response to production-ready React/TypeScript component. Pixel-perfect accuracy + enterprise quality.


## FIGMA MCP DATA EXTRACTION
\`\`\`typescript
// Essential MCP calls to make:
await figmaMCP.get_node({ nodeId })      // Component structure & properties
await figmaMCP.get_styles({ nodeId })    // Typography, colors, effects
await figmaMCP.get_variables({ nodeId }) // Design tokens & variables
await figmaMCP.get_image({ nodeId })     // Visual reference (2x scale)
\`\`\`


## CRITICAL REQUIREMENTS


### 1. EXACT VALUES ONLY
- Extract precise measurements from MCP response
- No utility class approximations (\`text-[18px]\` not \`text-lg\`)
- Preserve all shadow layers, exact colors, spacing
- Use arbitrary values in Tailwind for precision
- Respect auto-layout constraints from Figma


### 2. PRODUCTION ENHANCEMENTS
\`\`\`typescript
// Add what Figma doesn't show:
- Loading/error/disabled states
- Hover/focus/active interactions 
- Keyboard navigation (Enter/Space)
- ARIA labels and semantic HTML
- TypeScript interfaces (strict mode)
- Form validation states
- Animation/transition timings
\`\`\`


### 3. RESPONSIVE TRANSFORMATION
- Convert absolute positioning â†’ flexbox/grid
- Fixed dimensions â†’ responsive constraints (\`max-width + width: 100%\`)
- Add mobile breakpoints (\`text-sm md:text-base lg:text-lg\`)
- Touch-friendly sizing (min 44px hit targets)
- Respect Figma's auto-layout as flex properties
- Handle overflow scenarios gracefully


### 4. ACCESSIBILITY (NON-NEGOTIABLE)
- Semantic HTML (\`<button>\` not \`<div onClick>\`)
- ARIA labels on interactive elements
- Keyboard event handlers
- Color contrast compliance (check Figma's contrast ratios)
- Screen reader support
- Focus trap for modals
- Announce dynamic content changes


### 5. FIGMA-SPECIFIC CONVERSIONS
- Auto Layout â†’ CSS Flexbox/Grid
- Constraints â†’ CSS position/sizing rules  
- Effects â†’ CSS shadows/filters (exact values)
- Variables â†’ CSS custom properties
- Component variants â†’ React props/states
- Instances â†’ Reusable React components


## OUTPUT TEMPLATE
\`\`\`typescript
interface Props {
 title: string;
 onClick: () => void;
 disabled?: boolean;
 loading?: boolean;
 variant?: 'primary' | 'secondary'; // From Figma variants
 size?: 'sm' | 'md' | 'lg';         // From Figma variants
}


export const Component: React.FC<Props> = ({ 
  title, 
  onClick, 
  disabled, 
  loading,
  variant = 'primary',
  size = 'md' 
}) => {
  const sizeClasses = {
    sm: 'px-[16px] py-[8px] text-[14px]',
    md: 'px-[24px] py-[12px] text-[16px]', 
    lg: 'px-[32px] py-[16px] text-[18px]'
  };

  return (
    <button
      className={\`
        bg-[#EXACT_HEX] \${sizeClasses[size]} 
        hover:bg-[#EXACT_HOVER] focus:ring-[#EXACT_FOCUS]
        disabled:opacity-50 transition-all duration-200
        \${variant === 'secondary' ? 'border-2 border-[#EXACT_BORDER]' : ''}
      \`}
      onClick={onClick}
      disabled={disabled || loading}
      aria-label={title}
      aria-busy={loading}
    >
      {loading ? <Spinner /> : title}
    </button>
  );
};
\`\`\`


## SUCCESS CRITERIA
- Visual diff < 5% from Figma
- Passes accessibility audit (WCAG AA)
- TypeScript strict compliance 
- Works on mobile/desktop/tablet
- Bundle size < 100kb
- Performance score > 90
- All Figma variants implemented


## EXECUTION RULE
**Extract all data â†’ Map to code patterns â†’ Add production features â†’ Ensure accessibility â†’ Ship**


No phases, no documentation, no templates. Just convert and deliver production-ready code.`;
}
//# sourceMappingURL=figma-instructions.js.map