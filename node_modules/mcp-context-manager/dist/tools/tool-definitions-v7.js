/**
 * MCP Context Manager Tool Definitions v7
 * Simple AI Context for Better Code Generation
 *
 * Core principle: Simple tools that provide persistent context for AI agents
 */
export const toolDefinitions = [
    {
        name: 'setup_context',
        description: 'Create AI context files with smart defaults for your project',
        inputSchema: {
            type: 'object',
            properties: {
                projectPath: {
                    type: 'string',
                    description: 'Path to the project directory'
                },
                projectName: {
                    type: 'string',
                    description: 'Name of the project (optional - will auto-detect)'
                },
                autoDetect: {
                    type: 'boolean',
                    description: 'Auto-detect framework, language, and patterns (default: true)',
                    default: true
                }
            },
            required: ['projectPath'],
        },
    },
    {
        name: 'update_context',
        description: 'Provides a comprehensive checklist for AI agents to analyze your entire codebase and update context files (AI-CONTEXT.md, AI-PATTERNS.md, CLAUDE.md) with current project state, dependencies, patterns, and structure',
        inputSchema: {
            type: 'object',
            properties: {
                projectPath: {
                    type: 'string',
                    description: 'Path to the project directory'
                },
                sections: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Specific sections to update (optional - updates all if not specified)'
                },
                autoDetectChanges: {
                    type: 'boolean',
                    description: 'Auto-detect what changed since last update (default: true)',
                    default: true
                }
            },
            required: ['projectPath'],
        },
    },
    {
        name: 'persist_context',
        description: 'Enable automatic context loading across AI tools (Cursor, Claude Code, Copilot, etc.)',
        inputSchema: {
            type: 'object',
            properties: {
                projectPath: {
                    type: 'string',
                    description: 'Path to the project directory'
                },
                tools: {
                    type: 'array',
                    items: {
                        type: 'string',
                        enum: ['cursor', 'claude-code', 'claude-desktop', 'copilot', 'continue', 'all']
                    },
                    description: 'AI tools to configure (default: auto-detect installed tools)'
                },
                syncMode: {
                    type: 'string',
                    enum: ['watch', 'symlink', 'copy'],
                    description: 'How to keep files in sync (default: watch)',
                    default: 'watch'
                },
                gitHooks: {
                    type: 'boolean',
                    description: 'Install git hooks for context freshness checks (default: true)',
                    default: true
                }
            },
            required: ['projectPath'],
        },
    },
    {
        name: 'figma_to_code',
        description: 'Convert Figma designs to production-ready code with AI assistance',
        inputSchema: {
            type: 'object',
            properties: {
                mode: {
                    type: 'string',
                    enum: ['quick', 'detailed'],
                    description: 'Quick: Essential instructions only. Detailed: Comprehensive guide (default: quick)',
                    default: 'quick'
                },
                framework: {
                    type: 'string',
                    enum: ['react', 'vue', 'angular', 'auto'],
                    description: 'Target framework (default: auto-detect from context)',
                    default: 'auto'
                },
                includeA11y: {
                    type: 'boolean',
                    description: 'Include accessibility guidelines (default: true)',
                    default: true
                },
                includeResponsive: {
                    type: 'boolean',
                    description: 'Include responsive design guidelines (default: true)',
                    default: true
                }
            },
            required: [],
        },
    },
];
//# sourceMappingURL=tool-definitions-v7.js.map