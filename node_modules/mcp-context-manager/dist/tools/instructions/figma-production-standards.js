/**
 * Figma to Production Code Standards
 *
 * This module defines the complete production code standards for converting
 * Figma designs to Shadcn/Tailwind production-ready code.
 *
 * These standards ensure code quality, accessibility, performance, and maintainability.
 */
/**
 * Get all production code standards
 */
export function getProductionStandards() {
    return [
        {
            id: 'css-variables',
            title: 'CSS Variables for ALL Values',
            principle: 'Never hardcode values directly in components. All design tokens must be in CSS variables.',
            dontExample: `<div className="mb-16 text-[#1a1a1a]">`,
            doExample: `:root {
  --spacing-section: 4rem;
  --color-text-primary: #1a1a1a;
}
<div className="mb-[--spacing-section] text-[--color-text-primary]">`,
            implementation: `Create a comprehensive token system:
- Colors: --color-{semantic}-{shade}
- Spacing: --spacing-{size}
- Typography: --font-{property}
- Shadows: --shadow-{size}
- Radii: --radius-{size}
- Transitions: --transition-{speed}`
        },
        {
            id: 'layout-sizing',
            title: 'Layout-Based Sizing (No Fixed Dimensions)',
            principle: 'Components must be fluid and responsive. Use min/max constraints with flexible layouts.',
            dontExample: `<div className="w-[1440px] h-[600px]">`,
            doExample: `<div className="w-full max-w-7xl min-h-[600px]">`,
            implementation: `Use layout constraints:
- Container queries for responsive components
- Aspect ratios for media
- Grid/Flexbox for natural sizing
- min-height instead of fixed height
- max-width with margin auto for centering`
        },
        {
            id: 'no-absolute-positioning',
            title: 'NO Absolute Positioning for Layout (Visual Effects OK)',
            principle: 'Use modern CSS layout techniques for structure. Absolute positioning is acceptable for visual effects, overlays, and decorative elements.',
            dontExample: `<!-- DON'T: Using absolute for layout structure -->
<div className="relative">
  <button className="absolute left-[6px] top-[5px]">Sign Up</button>
  <button className="absolute right-[14px] top-[5px]">Sign In</button>
</div>`,
            doExample: `<!-- DO: Grid for layout, absolute for effects -->
<div className="grid grid-cols-2 gap-1 p-1">
  <button>Sign Up</button>
  <button>Sign In</button>
</div>

<!-- OK: Absolute for visual effects -->
<div className="relative grid place-items-center">
  <!-- Base layout with Grid/Flexbox -->
  <div className="card">Content</div>
  <!-- Decorative elements with absolute -->
  <div className="absolute -z-10 blur-3xl opacity-30" />
</div>`,
            implementation: `Layout hierarchy:
1. CSS Grid for 2D layouts
2. Flexbox for 1D layouts
3. Logical properties (margin-inline, padding-block)

Acceptable absolute positioning:
- Visual effects and decorations
- Floating UI elements (tooltips, popovers)
- Background decorative elements
- Pseudo-elements for effects
- Transform-origin adjustments

Always ensure:
- Base layout uses Grid/Flexbox
- Absolute elements don't affect document flow
- Effects are responsive with relative units`
        },
        {
            id: 'z-index-management',
            title: 'Standardized Z-Index Scale',
            principle: 'Use a consistent z-index scale to prevent z-index wars.',
            implementation: `:root {
  --z-base: 0;
  --z-dropdown: 10;
  --z-sticky: 20;
  --z-overlay: 30;
  --z-modal: 40;
  --z-popover: 50;
  --z-tooltip: 60;
}

/* Use CSS isolation for component stacking */
.component {
  isolation: isolate;
}`
        },
        {
            id: 'animation-transitions',
            title: 'Standardized Animation System',
            principle: 'Consistent timing functions and durations for all animations.',
            implementation: `:root {
  /* Timing functions */
  --ease-in: cubic-bezier(0.4, 0, 1, 1);
  --ease-out: cubic-bezier(0, 0, 0.2, 1);
  --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
  
  /* Durations */
  --duration-instant: 50ms;
  --duration-fast: 100ms;
  --duration-normal: 200ms;
  --duration-slow: 300ms;
}

/* Respect motion preferences */
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    animation-duration: 0.01ms !important;
    transition-duration: 0.01ms !important;
  }
}`
        },
        {
            id: 'touch-targets',
            title: 'Minimum Touch Target Sizes',
            principle: 'All interactive elements must meet minimum touch target requirements.',
            implementation: `:root {
  --touch-target-min: 44px; /* iOS standard */
  --touch-target-comfortable: 48px; /* Android standard */
}

button, a, input, select, [role="button"] {
  min-height: var(--touch-target-min);
  min-width: var(--touch-target-min);
  position: relative;
}

/* Expand click area without affecting layout */
button::before {
  content: "";
  position: absolute;
  inset: -8px;
}`
        },
        {
            id: 'form-patterns',
            title: 'Semantic Form Structure',
            principle: 'Forms must be semantic, accessible, and properly structured.',
            dontExample: `<input className="mb-4" />
<input className="mb-4" />
<button>Submit</button>`,
            doExample: `<form className="grid gap-6" onSubmit={handleSubmit}>
  <div className="grid gap-2">
    <Label htmlFor="email">Email</Label>
    <Input 
      id="email" 
      type="email" 
      required
      aria-describedby="email-error"
    />
    <FormMessage id="email-error" />
  </div>
  <Button type="submit">Submit</Button>
</form>`,
            implementation: `Form requirements:
- Semantic HTML form elements
- Associated labels with inputs
- Error messages linked via aria-describedby
- Loading states during submission
- Clear validation feedback
- Keyboard navigation support`
        },
        {
            id: 'component-composition',
            title: 'Composable Component Architecture',
            principle: 'Build small, reusable, composable components instead of monoliths.',
            dontExample: `<SuperComplexMegaComponent />`,
            doExample: `<Card>
  <CardHeader>
    <CardTitle>Title</CardTitle>
    <CardDescription>Description</CardDescription>
  </CardHeader>
  <CardContent>
    <Form>
      <FormField />
    </Form>
  </CardContent>
  <CardFooter>
    <Button>Action</Button>
  </CardFooter>
</Card>`,
            implementation: `Composition patterns:
- Compound components for related UI
- Render props for flexible rendering
- Slot pattern for content injection
- Provider pattern for shared state
- Headless components for logic reuse`
        },
        {
            id: 'loading-error-states',
            title: 'Complete State Management',
            principle: 'Every component must handle loading, error, empty, and success states.',
            implementation: `interface ComponentState {
  status: 'idle' | 'loading' | 'error' | 'success';
  error?: Error;
  data?: Data;
}

const Component = () => {
  const { status, error, data } = useComponentState();
  
  if (status === 'loading') {
    return <Skeleton className="h-10 w-full" />;
  }
  
  if (status === 'error') {
    return (
      <Alert variant="destructive">
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>{error.message}</AlertDescription>
      </Alert>
    );
  }
  
  if (!data || data.length === 0) {
    return <EmptyState />;
  }
  
  return <SuccessContent data={data} />;
};`
        },
        {
            id: 'focus-management',
            title: 'Keyboard Navigation & Focus Management',
            principle: 'Ensure complete keyboard accessibility and proper focus management.',
            implementation: `/* Skip links for navigation */
<a 
  href="#main-content" 
  className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4"
>
  Skip to main content
</a>

/* Focus trap for modals */
import { FocusTrap } from '@radix-ui/react-focus-trap';

<Dialog>
  <DialogContent>
    <FocusTrap>
      <DialogHeader>...</DialogHeader>
      <DialogBody>...</DialogBody>
    </FocusTrap>
  </DialogContent>
</Dialog>

/* Visible focus indicators */
:focus-visible {
  outline: 2px solid var(--color-focus);
  outline-offset: 2px;
}`
        },
        {
            id: 'dark-mode',
            title: 'Dark Mode Support',
            principle: 'All components must support light and dark modes using CSS variables.',
            implementation: `:root {
  /* Light mode (default) */
  --bg-primary: 255 255 255;
  --text-primary: 0 0 0;
  --border-color: 229 231 235;
}

.dark {
  /* Dark mode */
  --bg-primary: 0 0 0;
  --text-primary: 255 255 255;
  --border-color: 38 38 38;
}

/* Use with opacity for flexibility */
.component {
  background-color: rgb(var(--bg-primary));
  color: rgb(var(--text-primary));
  border-color: rgb(var(--border-color));
}`
        },
        {
            id: 'image-optimization',
            title: 'Optimized Image Loading',
            principle: 'All images must be optimized for performance and accessibility.',
            dontExample: `<img src="/hero.png" />`,
            doExample: `import Image from 'next/image';

<Image 
  src="/hero.png" 
  alt="Hero section showing product dashboard"
  width={800}
  height={400}
  priority
  placeholder="blur"
  blurDataURL={blurDataUrl}
  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 800px"
/>`,
            implementation: `Image requirements:
- Always include descriptive alt text
- Use Next.js Image or similar optimization
- Provide blur placeholders
- Define responsive sizes
- Lazy load below-fold images
- Use WebP/AVIF formats
- Inline critical SVGs`
        },
        {
            id: 'scroll-behavior',
            title: 'Smooth Scroll & Scroll Margins',
            principle: 'Implement smooth scrolling with reduced motion support and proper scroll margins.',
            implementation: `/* Smooth scrolling with motion preference */
@media (prefers-reduced-motion: no-preference) {
  html {
    scroll-behavior: smooth;
  }
}

/* Scroll margins for fixed headers */
:target {
  scroll-margin-top: var(--header-height, 4rem);
}

/* Scroll padding for containers */
.scroll-container {
  scroll-padding: 1rem;
  scrollbar-gutter: stable;
}`
        },
        {
            id: 'component-boundaries',
            title: 'Self-Contained Components',
            principle: 'Each component should be self-contained with clear boundaries and props.',
            implementation: `import { cn } from '@/lib/utils';
import { ComponentPropsWithoutRef, forwardRef } from 'react';

interface ComponentProps extends ComponentPropsWithoutRef<'div'> {
  variant?: 'default' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
}

export const Component = forwardRef<HTMLDivElement, ComponentProps>(
  ({ className, variant = 'default', size = 'md', ...props }, ref) => {
    return (
      <div 
        ref={ref}
        className={cn(
          // Base styles
          "relative inline-flex items-center justify-center",
          // Variant styles
          variants[variant],
          // Size styles
          sizes[size],
          // Allow override
          className
        )}
        {...props}
      />
    );
  }
);

Component.displayName = 'Component';`
        },
        {
            id: 'performance-patterns',
            title: 'Performance Optimization Patterns',
            principle: 'Implement performance best practices for optimal user experience.',
            implementation: `/* Code splitting */
const HeavyComponent = lazy(() => import('./HeavyComponent'));

/* Memoization for expensive renders */
const MemoizedComponent = memo(Component, (prevProps, nextProps) => {
  return prevProps.id === nextProps.id;
});

/* Virtualization for long lists */
import { VirtualList } from '@tanstack/react-virtual';

<VirtualList
  height={600}
  itemCount={items.length}
  itemSize={50}
  overscan={5}
>
  {(virtualRow) => <Item key={virtualRow.key} />}
</VirtualList>

/* Debounced inputs */
const debouncedValue = useDebounce(inputValue, 300);

/* Optimistic updates */
const { mutate } = useMutation({
  onMutate: async (newData) => {
    await queryClient.cancelQueries(['items']);
    const previous = queryClient.getQueryData(['items']);
    queryClient.setQueryData(['items'], newData);
    return { previous };
  },
  onError: (err, newData, context) => {
    queryClient.setQueryData(['items'], context.previous);
  }
});`
        },
        {
            id: 'responsive-transforms',
            title: 'Responsive 3D Effects & Transforms',
            principle: 'Create immersive visual effects while maintaining responsiveness and performance.',
            doExample: `:root {
  /* Transform values as variables */
  --perspective: 1200px;
  --rotate-x: -10deg;
  --rotate-y: 15deg;
  --rotate-z: -2deg;
  --scale-hover: 1.05;
  
  /* Responsive scaling */
  --transform-scale: clamp(0.8, 2vw, 1);
}

/* 3D Container */
.hero-3d {
  perspective: var(--perspective);
  transform-style: preserve-3d;
}

/* 3D Element with responsive transforms */
.floating-card {
  transform: 
    perspective(var(--perspective))
    rotateX(calc(var(--rotate-x) * var(--transform-scale)))
    rotateY(calc(var(--rotate-y) * var(--transform-scale)))
    rotateZ(calc(var(--rotate-z) * var(--transform-scale)))
    translateZ(0); /* GPU acceleration */
  
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  will-change: transform;
}

/* Reduce motion support */
@media (prefers-reduced-motion: reduce) {
  .floating-card {
    transform: none;
  }
}

/* Mobile adjustments */
@media (max-width: 768px) {
  :root {
    --perspective: 800px;
    --rotate-x: -5deg;
    --rotate-y: 8deg;
  }
}`,
            implementation: `3D Effect Guidelines:
1. **Base Layout First**
   - Use Grid/Flexbox for structure
   - Apply transforms on top of solid layout
   - Never rely on transforms for positioning

2. **Responsive Transforms**
   - Use CSS variables for all values
   - Scale effects with viewport units
   - Reduce complexity on mobile
   - Test on low-end devices

3. **Performance Optimization**
   - Use transform and opacity only
   - Add will-change for animated elements
   - Enable GPU acceleration with translateZ(0)
   - Limit the number of 3D elements

4. **Accessibility**
   - Respect prefers-reduced-motion
   - Ensure content is readable without effects
   - Don't rely on hover for mobile
   - Maintain contrast with transforms

5. **Common Patterns**
   - Parallax scrolling with transforms
   - Card flip animations
   - Floating elements with perspective
   - Tilt effects on hover
   - 3D carousels and galleries

Example: Responsive 3D Hero Section
\`\`\`tsx
<section className="hero-3d relative min-h-screen grid place-items-center overflow-hidden">
  {/* Base layout with Grid */}
  <div className="relative z-10 text-center space-y-8">
    <h1 className="text-6xl font-bold">Get Sh*t Done</h1>
    <p className="text-xl">We really mean it.</p>
  </div>
  
  {/* 3D Floating Elements */}
  <div className="absolute inset-0 pointer-events-none">
    <div className="floating-card absolute top-20 left-10 w-64 h-40">
      <Card />
    </div>
    <div className="floating-card absolute bottom-20 right-10 w-48 h-32" 
         style={{ '--rotate-y': '20deg' }}>
      <Terminal />
    </div>
  </div>
  
  {/* Background gradient */}
  <div className="absolute inset-0 -z-10 bg-gradient-to-br from-orange-200 via-pink-200 to-purple-200" />
</section>
\`\`\``
        }
    ];
}
/**
 * Generate production code checklist
 */
export function generateProductionChecklist() {
    const standards = getProductionStandards();
    return `# 🚀 FIGMA TO PRODUCTION CODE STANDARDS

## Core Principles

1. **NO hardcoded values** - Everything in CSS variables
2. **NO fixed dimensions** - Use min/max with flexible layouts  
3. **NO absolute positioning** - Use Grid/Flexbox/logical properties
4. **ALWAYS semantic HTML** - Proper elements and ARIA labels
5. **ALWAYS complete states** - Loading, error, empty, and success
6. **ALWAYS composable** - Small, reusable components
7. **ALWAYS accessible** - Keyboard nav, screen readers, focus management
8. **ALWAYS performant** - Lazy load, memoize, virtualize when needed
9. **ALWAYS responsive** - Mobile-first with proper touch targets
10. **ALWAYS maintainable** - Clear naming, proper structure, documentation

## Detailed Standards

${standards.map(standard => `
### ${standard.id}. ${standard.title}

**Principle**: ${standard.principle}

${standard.dontExample ? `❌ **Never Do This**:
\`\`\`tsx
${standard.dontExample}
\`\`\`
` : ''}
${standard.doExample ? `✅ **Always Do This**:
\`\`\`tsx
${standard.doExample}
\`\`\`
` : ''}
**Implementation**:
${standard.implementation}
`).join('\n')}

## Complete Conversion Examples

### Example 1: Simple Toggle Component

#### Figma MCP Response (What you might get):
\`\`\`tsx
<div className="relative w-[144px] h-[40px]">
  <div className="absolute inset-0 bg-[rgba(0,0,0,0.03)] rounded-[30px]" />
  <div className="absolute left-[6px] top-[5px] h-[30px] px-4 bg-white rounded-[30px]">
    Sign Up
  </div>
  <div className="absolute right-[14px] top-[5px] text-[#535967]">
    Sign In
  </div>
</div>
\`\`\`

#### Production-Ready Output (What you should build):
\`\`\`tsx
// 1. Define CSS Variables
const toggleStyles = \`
  :root {
    --toggle-bg: rgb(0 0 0 / 0.03);
    --toggle-bg-dark: rgb(255 255 255 / 0.05);
    --toggle-active-bg: rgb(255 255 255);
    --toggle-active-bg-dark: rgb(38 38 38);
    --toggle-text: rgb(83 89 103);
    --toggle-text-dark: rgb(163 163 163);
    --toggle-radius: 1.875rem;
    --toggle-padding: 0.25rem;
    --toggle-gap: 0.25rem;
    --toggle-height: 2.5rem;
    --toggle-transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);
  }
\`;

// 2. Create Accessible Component
interface ToggleGroupProps {
  value: 'signup' | 'signin';
  onValueChange: (value: 'signup' | 'signin') => void;
}

export function AuthToggle({ value, onValueChange }: ToggleGroupProps) {
  return (
    <div
      role="tablist"
      aria-label="Authentication mode"
      className={cn(
        "inline-grid grid-cols-2",
        "gap-[--toggle-gap] p-[--toggle-padding]",
        "bg-[--toggle-bg] dark:bg-[--toggle-bg-dark]",
        "rounded-[--toggle-radius]",
        "min-h-[--toggle-height]",
        "isolate" // Prevent z-index issues
      )}
    >
      <button
        role="tab"
        aria-selected={value === 'signup'}
        aria-controls="signup-panel"
        onClick={() => onValueChange('signup')}
        className={cn(
          "relative rounded-[--toggle-radius]",
          "text-[--toggle-text] dark:text-[--toggle-text-dark]",
          "transition-[var(--toggle-transition)]",
          "min-w-[--touch-target-min]", // Touch target
          "focus-visible:outline-2 focus-visible:outline-offset-2",
          "focus-visible:outline-[--color-focus]",
          value === 'signup' && [
            "bg-[--toggle-active-bg] dark:bg-[--toggle-active-bg-dark]",
            "shadow-sm",
            "text-foreground"
          ]
        )}
      >
        Sign Up
      </button>
      
      <button
        role="tab"
        aria-selected={value === 'signin'}
        aria-controls="signin-panel"
        onClick={() => onValueChange('signin')}
        className={cn(
          "relative rounded-[--toggle-radius]",
          "text-[--toggle-text] dark:text-[--toggle-text-dark]",
          "transition-[var(--toggle-transition)]",
          "min-w-[--touch-target-min]",
          "focus-visible:outline-2 focus-visible:outline-offset-2",
          "focus-visible:outline-[--color-focus]",
          value === 'signin' && [
            "bg-[--toggle-active-bg] dark:bg-[--toggle-active-bg-dark]",
            "shadow-sm",
            "text-foreground"
          ]
        )}
      >
        Sign In
      </button>
    </div>
  );
}

// 3. Usage with Complete State Management
function AuthForm() {
  const [mode, setMode] = useState<'signup' | 'signin'>('signup');
  const [status, setStatus] = useState<'idle' | 'loading' | 'error'>('idle');
  
  return (
    <Card className="w-full max-w-md">
      <CardHeader>
        <AuthToggle value={mode} onValueChange={setMode} />
      </CardHeader>
      <CardContent>
        <div
          id={\`\${mode}-panel\`}
          role="tabpanel"
          aria-labelledby={mode}
        >
          {status === 'loading' ? (
            <Skeleton className="h-40 w-full" />
          ) : (
            <Form mode={mode} onSubmit={handleSubmit} />
          )}
        </div>
      </CardContent>
    </Card>
  );
}
\`\`\`

### Example 2: 3D Hero Section with Floating Elements

#### Figma Design (Visual Effect Rich):
\`\`\`tsx
// Figma might show a hero with 3D perspective cards
<div style={{perspective: "1000px", position: "relative"}}>
  <div style={{
    position: "absolute",
    transform: "rotateY(15deg) rotateX(-10deg)",
    left: "100px",
    top: "50px"
  }}>
    <Terminal />
  </div>
  <h1 style={{position: "absolute", left: "center", top: "200px"}}>
    Get Sh*t Done
  </h1>
</div>
\`\`\`

#### Production-Ready Output (Responsive 3D):
\`\`\`tsx
// 1. CSS Variables for 3D Effects
const hero3DStyles = \`
  :root {
    /* 3D Transform Values */
    --hero-perspective: 1200px;
    --card-rotate-x: -10deg;
    --card-rotate-y: 15deg;
    --card-translate-z: 20px;
    
    /* Responsive Scaling */
    --transform-intensity: 1;
    --transform-scale: clamp(0.5, 4vw, 1);
    
    /* Animation */
    --float-duration: 6s;
    --hover-scale: 1.05;
  }
  
  @media (max-width: 768px) {
    :root {
      --hero-perspective: 800px;
      --transform-intensity: 0.6;
    }
  }
  
  @media (prefers-reduced-motion: reduce) {
    :root {
      --transform-intensity: 0;
      --float-duration: 0s;
    }
  }
\`;

// 2. Component Implementation
export function Hero3D() {
  const { ref, style } = use3DMouseEffect();
  
  return (
    <section 
      className="hero-container"
      style={{ perspective: 'var(--hero-perspective)' }}
    >
      {/* Base Layout with Grid */}
      <div className="grid place-items-center min-h-screen">
        <div className="text-center z-10">
          <h1 className="text-6xl font-bold">Get Sh*t Done</h1>
          <p className="text-xl mt-4">We really mean it.</p>
          <Button className="mt-8">Get Started</Button>
        </div>
      </div>
      
      {/* 3D Floating Elements Layer */}
      <div className="absolute inset-0 pointer-events-none">
        {/* Floating Terminal */}
        <div 
          ref={ref}
          className="floating-element absolute top-[10%] left-[5%]"
          style={{
            ...style,
            transform: \`
              rotateX(calc(var(--card-rotate-x) * var(--transform-scale)))
              rotateY(calc(var(--card-rotate-y) * var(--transform-scale)))
              translateZ(var(--card-translate-z))
            \`,
            animation: 'float var(--float-duration) ease-in-out infinite'
          }}
        >
          <Terminal className="w-64 shadow-2xl" />
        </div>
        
        {/* More floating elements... */}
      </div>
      
      {/* Background Gradient */}
      <div className="absolute inset-0 -z-10">
        <div className="absolute inset-0 bg-gradient-to-br from-orange-200 via-pink-200 to-purple-200" />
        <div className="absolute inset-0 backdrop-blur-3xl opacity-30" />
      </div>
    </section>
  );
}

// 3. Reusable 3D Hook
function use3DMouseEffect() {
  const ref = useRef<HTMLDivElement>(null);
  const [transform, setTransform] = useState({ rotateX: 0, rotateY: 0 });
  
  useEffect(() => {
    const element = ref.current;
    if (!element) return;
    
    const handleMouseMove = (e: MouseEvent) => {
      const rect = element.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      
      const angleY = (e.clientX - centerX) / 25;
      const angleX = -(e.clientY - centerY) / 25;
      
      setTransform({
        rotateX: angleX,
        rotateY: angleY
      });
    };
    
    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);
  
  return {
    ref,
    style: {
      '--dynamic-rotate-x': \`\${transform.rotateX}deg\`,
      '--dynamic-rotate-y': \`\${transform.rotateY}deg\`,
    }
  };
}

// 4. CSS Animations
const animations = \`
  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
  }
  
  .floating-element {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform;
  }
  
  .floating-element:hover {
    transform: scale(var(--hover-scale));
  }
\`;
\`\`\`

## Validation Checklist

Before considering any Figma conversion complete, verify:

- [ ] All values are in CSS variables
- [ ] No fixed widths/heights (using min/max instead)
- [ ] No absolute positioning for layout (OK for visual effects)
- [ ] Proper semantic HTML structure
- [ ] Complete keyboard navigation
- [ ] All interactive states implemented
- [ ] Touch targets meet minimum size
- [ ] Dark mode fully supported
- [ ] Loading/error/empty states handled
- [ ] Images optimized with proper alt text
- [ ] Smooth scrolling with reduced motion respect
- [ ] Components are self-contained and composable
- [ ] Performance optimizations applied where needed
- [ ] 3D effects are responsive and accessible
- [ ] Transform values scale with viewport
- [ ] WCAG AA compliance verified
- [ ] Cross-browser testing completed`;
}
/**
 * Get specific standard by ID
 */
export function getStandardById(id) {
    return getProductionStandards().find(s => s.id === id);
}
/**
 * Get standards for specific category
 */
export function getStandardsByCategory(category) {
    const categoryMap = {
        layout: ['layout-sizing', 'no-absolute-positioning', 'z-index-management'],
        accessibility: ['touch-targets', 'form-patterns', 'focus-management', 'dark-mode'],
        performance: ['performance-patterns', 'image-optimization'],
        styling: ['css-variables', 'animation-transitions', 'component-boundaries'],
        effects: ['responsive-transforms']
    };
    const ids = categoryMap[category] || [];
    return getProductionStandards().filter(s => ids.includes(s.id));
}
//# sourceMappingURL=figma-production-standards.js.map