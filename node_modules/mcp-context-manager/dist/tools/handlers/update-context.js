import { promises as fs } from 'fs';
import { join } from 'path';
export async function updateContextFiles(params) {
    const { projectPath, sections, autoDetectChanges } = params;
    try {
        const contextPath = join(projectPath, 'AI-CONTEXT.md');
        const patternsPath = join(projectPath, 'AI-PATTERNS.md');
        // Check if context files exist
        try {
            await fs.access(contextPath);
        }
        catch {
            return {
                success: false,
                message: '❌ No context files found. Run setup_context first.',
                updatedSections: []
            };
        }
        let updatedSections = [];
        if (autoDetectChanges) {
            // Create a comprehensive checklist for the AI agent to complete
            const updateChecklist = `
# 📋 UPDATE CONTEXT CHECKLIST

Complete each task below to update the AI context files with the latest project changes.

## Phase 1: Analyze Current State

### Dependencies Analysis
- [ ] READ package.json and extract all dependencies with exact versions
- [ ] COMPARE dependencies in package.json with those listed in AI-CONTEXT.md
- [ ] IDENTIFY new dependencies added since last update
- [ ] IDENTIFY removed dependencies
- [ ] NOTE version changes for existing dependencies

### Project Structure Analysis
- [ ] SCAN the entire project directory structure
- [ ] LIST all directories under src/, app/, pages/, lib/, components/
- [ ] IDENTIFY new directories or files added
- [ ] DETECT any structural reorganization
- [ ] MAP the current file organization

### Code Pattern Detection
- [ ] READ at least 10 component files to identify patterns
- [ ] ANALYZE import statements across files
- [ ] DETECT state management patterns (useState, Redux, Context, etc.)
- [ ] IDENTIFY styling approach (CSS modules, styled-components, Tailwind, etc.)
- [ ] EXTRACT naming conventions for files and components

### API and Routes Analysis
- [ ] SCAN for API route files (api/, routes/, endpoints/)
- [ ] LIST all API endpoints found
- [ ] IDENTIFY REST vs GraphQL patterns
- [ ] DETECT authentication methods used
- [ ] NOTE error handling patterns

### Testing Patterns
- [ ] FIND all test files (*.test.*, *.spec.*)
- [ ] IDENTIFY testing framework (Jest, Vitest, etc.)
- [ ] ANALYZE test structure and patterns
- [ ] CHECK coverage configuration
- [ ] NOTE testing best practices used

### Configuration Analysis
- [ ] READ all config files (tsconfig.json, .eslintrc, etc.)
- [ ] CHECK build tool configuration (vite.config, webpack.config, etc.)
- [ ] REVIEW environment variable usage
- [ ] IDENTIFY deployment configuration

## Phase 2: Update Context Files

### Update AI-CONTEXT.md
- [ ] UPDATE "Tech Stack" section with current dependencies and versions
- [ ] REFRESH "Project Structure" with current directory tree
- [ ] UPDATE "Development Guidelines" based on detected patterns
- [ ] REVISE "API Patterns" with current endpoints
- [ ] UPDATE "Testing Strategy" with current approach
- [ ] REFRESH "Quick Commands" if scripts changed
- [ ] UPDATE "Last Updated" date to today

### Update AI-PATTERNS.md
- [ ] ADD new component patterns discovered
- [ ] UPDATE existing patterns if they changed
- [ ] ADD new hook patterns found
- [ ] UPDATE API call patterns with real examples
- [ ] ADD new testing patterns
- [ ] ENSURE all code examples are from actual project files
- [ ] REMOVE any outdated patterns

## Phase 3: Validation

### Content Validation
- [ ] VERIFY no placeholder text remains (search for [ ], { }, TODO)
- [ ] CONFIRM all code examples compile/are valid
- [ ] CHECK that all file paths referenced exist
- [ ] ENSURE dependency versions match package.json exactly
- [ ] VALIDATE that patterns match actual code

### Cross-File Consistency
- [ ] ENSURE tech stack is consistent across both files
- [ ] VERIFY patterns in AI-PATTERNS.md match guidelines in AI-CONTEXT.md

### Final Checks
- [ ] All checklist items above completed ✓
- [ ] No outdated information remains
- [ ] Both files updated
- [ ] Changes are meaningful (not just date updates)

## Execution Instructions

1. Work through this checklist systematically
2. Check off each item as you complete it
3. For each file you update, make real changes based on analysis
4. Do not leave any placeholders or generic text
5. Use actual examples from the codebase

TARGET FILES TO UPDATE:
- ${contextPath}
- ${patternsPath}

BEGIN EXECUTION NOW. Report back when all items are checked.`;
            return {
                success: true,
                message: updateChecklist,
                updatedSections: ['auto-detected']
            };
        }
        // Manual section update with checklist
        if (sections && sections.length > 0) {
            const sectionChecklist = generateSectionChecklist(sections, contextPath, patternsPath);
            return {
                success: true,
                message: sectionChecklist,
                updatedSections: sections
            };
        }
        // Full update checklist
        return {
            success: true,
            message: generateFullUpdateChecklist(contextPath, patternsPath),
            updatedSections: ['all']
        };
    }
    catch (error) {
        return {
            success: false,
            message: `Failed to update context: ${error instanceof Error ? error.message : 'Unknown error'}`,
            updatedSections: []
        };
    }
}
function generateSectionChecklist(sections, contextPath, patternsPath) {
    const sectionTasks = {
        'overview': [
            'READ README.md and project documentation',
            'ANALYZE main application files to understand purpose',
            'UPDATE project description in AI-CONTEXT.md',
            'REVISE key features list with current capabilities',
            'UPDATE project goals if they have evolved'
        ],
        'tech-stack': [
            'READ package.json for all dependencies',
            'CHECK package-lock.json for exact versions',
            'IDENTIFY framework and major libraries',
            'UPDATE dependencies list in AI-CONTEXT.md',
            'CATEGORIZE dependencies by purpose'
        ],
        'structure': [
            'SCAN entire directory structure',
            'CREATE accurate directory tree',
            'IDENTIFY organizational patterns',
            'UPDATE project structure in AI-CONTEXT.md',
            'NOTE any non-standard directories'
        ],
        'guidelines': [
            'ANALYZE code files for consistent patterns',
            'IDENTIFY naming conventions used',
            'DETECT code style preferences',
            'UPDATE development guidelines in AI-CONTEXT.md',
            'ADD specific examples from codebase'
        ],
        'api': [
            'FIND all API endpoint definitions',
            'ANALYZE request/response patterns',
            'IDENTIFY authentication methods',
            'UPDATE API patterns in AI-CONTEXT.md',
            'INCLUDE real endpoint examples'
        ],
        'testing': [
            'LOCATE all test files',
            'IDENTIFY testing frameworks used',
            'ANALYZE test structure patterns',
            'UPDATE testing section in AI-CONTEXT.md',
            'ADD example test patterns to AI-PATTERNS.md'
        ],
        'deployment': [
            'CHECK for deployment configurations',
            'IDENTIFY CI/CD setup',
            'FIND environment configurations',
            'UPDATE deployment section in AI-CONTEXT.md',
            'NOTE deployment commands'
        ],
        'patterns': [
            'ANALYZE component files for patterns',
            'EXTRACT hook usage patterns',
            'IDENTIFY service/API patterns',
            'UPDATE all patterns in AI-PATTERNS.md',
            'ENSURE examples are from real code'
        ]
    };
    let checklist = `# 📋 SECTION UPDATE CHECKLIST

Complete these tasks to update the requested sections: ${sections.join(', ')}

`;
    sections.forEach((section, index) => {
        const tasks = sectionTasks[section.toLowerCase()] || [
            `ANALYZE files related to ${section}`,
            `EXTRACT current information about ${section}`,
            `UPDATE ${section} section in context files`,
            `VALIDATE updates are accurate`,
            `ADD real examples where applicable`
        ];
        checklist += `## ${index + 1}. Update "${section}" Section

`;
        tasks.forEach(task => {
            checklist += `- [ ] ${task}\n`;
        });
        checklist += '\n';
    });
    checklist += `## Final Steps

- [ ] VERIFY all requested sections updated
- [ ] ENSURE consistency across files
- [ ] VALIDATE no placeholders remain
- [ ] CONFIRM examples are from actual code

TARGET FILES:
- ${contextPath}${sections.includes('patterns') ? `\n- ${patternsPath}` : ''}

BEGIN EXECUTION NOW. Check off each item as completed.`;
    return checklist;
}
function generateFullUpdateChecklist(contextPath, patternsPath) {
    return `# 📋 COMPREHENSIVE UPDATE CHECKLIST

Complete ALL tasks to fully update the AI context files.

## Phase 1: Complete Codebase Analysis

### 1.1 Dependency Analysis
- [ ] READ package.json and list ALL dependencies with versions
- [ ] CATEGORIZE dependencies (framework, UI, testing, build, etc.)
- [ ] IDENTIFY the primary framework and version
- [ ] NOTE any unusual or custom dependencies
- [ ] CHECK for monorepo setup (workspaces, lerna, etc.)

### 1.2 File Structure Analysis
- [ ] MAP the complete directory structure
- [ ] COUNT files by type (.ts, .tsx, .js, .jsx, .css, etc.)
- [ ] IDENTIFY the source code organization pattern
- [ ] LOCATE configuration files
- [ ] FIND documentation files

### 1.3 Code Pattern Analysis
- [ ] READ at least 20 files across different directories
- [ ] IDENTIFY component declaration patterns
- [ ] ANALYZE state management approach
- [ ] DETECT styling methodology
- [ ] EXTRACT error handling patterns
- [ ] NOTE async/await vs promise patterns
- [ ] IDENTIFY TypeScript usage patterns

### 1.4 Architecture Analysis
- [ ] DETERMINE if using MVC, MVVM, or other pattern
- [ ] IDENTIFY service layer patterns
- [ ] ANALYZE data flow architecture
- [ ] DETECT API communication patterns
- [ ] MAP the routing structure

## Phase 2: Update All Context Files

### 2.1 Update AI-CONTEXT.md Completely
- [ ] UPDATE project overview with current description
- [ ] REWRITE tech stack section with all findings
- [ ] REGENERATE project structure tree
- [ ] UPDATE all development guidelines
- [ ] REFRESH API patterns section
- [ ] UPDATE testing strategy
- [ ] REVISE performance considerations
- [ ] UPDATE security guidelines
- [ ] REFRESH deployment information
- [ ] UPDATE all quick commands
- [ ] SET "Last Updated" to today's date

### 2.2 Update AI-PATTERNS.md Completely
- [ ] ADD/UPDATE component patterns (5+ examples)
- [ ] ADD/UPDATE hook patterns (3+ examples)
- [ ] ADD/UPDATE service patterns
- [ ] ADD/UPDATE API call patterns
- [ ] ADD/UPDATE error handling patterns
- [ ] ADD/UPDATE testing patterns
- [ ] ADD/UPDATE state management patterns
- [ ] ENSURE all examples compile
- [ ] REMOVE any outdated patterns

## Phase 3: Validation & Quality Check

### 3.1 Content Validation
- [ ] SEARCH for and remove ALL placeholders: [ ], { }, TODO, TBD
- [ ] VERIFY every code example is from the actual codebase
- [ ] CONFIRM all file paths mentioned exist
- [ ] ENSURE all version numbers are exact
- [ ] CHECK that no generic/template text remains

### 3.2 Accuracy Validation
- [ ] Dependencies in context match package.json EXACTLY
- [ ] File structure in context matches actual structure
- [ ] Patterns shown match actual code patterns
- [ ] Commands listed actually work

### 3.3 Completeness Check
- [ ] Every section has substantial, specific content
- [ ] No section says "to be updated" or similar
- [ ] Examples cover common use cases
- [ ] Guidelines are actionable and specific

## Phase 4: Final Review

- [ ] Both files have been meaningfully updated
- [ ] Information is consistent across both files
- [ ] Updates reflect actual current state (not assumptions)
- [ ] All checklist items above are checked ✓

FILES TO UPDATE:
- ${contextPath}
- ${patternsPath}

BEGIN SYSTEMATIC EXECUTION. This should take 15-30 minutes to do properly.
Report progress as you complete each phase.`;
}
//# sourceMappingURL=update-context.js.map