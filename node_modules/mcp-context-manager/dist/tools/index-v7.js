import { CallToolRequestSchema, ListToolsRequestSchema, } from '@modelcontextprotocol/sdk/types.js';
import { z } from 'zod';
import { toolDefinitions } from './tool-definitions-v7.js';
import { createContextFiles, updateContextFiles, setupPersistence, generateFigmaInstructions } from './handlers/index.js';
export function setupTools(server) {
    // Handle tool listing
    server.setRequestHandler(ListToolsRequestSchema, async () => {
        return { tools: toolDefinitions };
    });
    // Handle tool execution
    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        const { name, arguments: args } = request.params;
        try {
            switch (name) {
                case 'setup_context': {
                    const params = z.object({
                        projectPath: z.string(),
                        projectName: z.string().optional(),
                        autoDetect: z.boolean().default(true),
                    }).parse(args);
                    const result = await createContextFiles(params);
                    return {
                        content: [{
                                type: 'text',
                                text: result.message
                            }]
                    };
                }
                case 'update_context': {
                    const params = z.object({
                        projectPath: z.string(),
                        sections: z.array(z.string()).optional(),
                        autoDetectChanges: z.boolean().default(true),
                    }).parse(args);
                    const result = await updateContextFiles(params);
                    return {
                        content: [{
                                type: 'text',
                                text: result.message
                            }]
                    };
                }
                case 'persist_context': {
                    const params = z.object({
                        projectPath: z.string(),
                        tools: z.array(z.enum(['cursor', 'claude-code', 'claude-desktop', 'copilot', 'continue', 'all'])).optional(),
                        syncMode: z.enum(['watch', 'symlink', 'copy']).default('watch'),
                        gitHooks: z.boolean().default(true),
                    }).parse(args);
                    const result = await setupPersistence(params);
                    return {
                        content: [{
                                type: 'text',
                                text: result.message
                            }]
                    };
                }
                case 'figma_to_code': {
                    const params = z.object({
                        mode: z.enum(['quick', 'detailed']).default('quick'),
                        framework: z.enum(['react', 'vue', 'angular', 'auto']).default('auto'),
                        includeA11y: z.boolean().default(true),
                        includeResponsive: z.boolean().default(true),
                    }).parse(args);
                    const instructions = generateFigmaInstructions(params);
                    return {
                        content: [{
                                type: 'text',
                                text: instructions
                            }]
                    };
                }
                default:
                    throw new Error(`Unknown tool: ${name}`);
            }
        }
        catch (error) {
            return {
                content: [{
                        type: 'text',
                        text: `‚ùå Error: ${error instanceof Error ? error.message : 'Unknown error'}`
                    }]
            };
        }
    });
}
//# sourceMappingURL=index-v7.js.map