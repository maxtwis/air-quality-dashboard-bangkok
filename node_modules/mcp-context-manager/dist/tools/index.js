import { CallToolRequestSchema, ListToolsRequestSchema, } from '@modelcontextprotocol/sdk/types.js';
import { z } from 'zod';
import { toolDefinitions } from './tool-definitions.js';
import { createAgentWorkspace } from './workspace/orchestration-workspace.js';
import { generateAnalysisInstruction, generateUpdateInstruction, generateDependencyCheckInstruction, generateCodeValidationInstruction, generatePatternInstruction } from './instructions/instruction-generator.js';
import { generatePersistenceChecklistInstructions } from './instructions/persistence-instructions.js';
import { generateCompleteFigmaWorkflow, generateProductionReadyInstruction } from './instructions/figma-orchestration-instructions.js';
import { join } from 'path';
export function setupTools(server) {
    // Handle tool listing
    server.setRequestHandler(ListToolsRequestSchema, async () => {
        return { tools: toolDefinitions };
    });
    // Handle tool execution
    server.setRequestHandler(CallToolRequestSchema, async (request) => {
        const { name, arguments: args } = request.params;
        try {
            switch (name) {
                case 'initialize_agent_workspace': {
                    const params = z.object({
                        projectPath: z.string(),
                        projectName: z.string(),
                    }).parse(args);
                    // Create workspace
                    const result = await createAgentWorkspace(params.projectPath, params.projectName);
                    if (!result.success) {
                        return {
                            content: [{
                                    type: 'text',
                                    text: `❌ Failed: ${result.message}`
                                }]
                        };
                    }
                    // Generate basic instructions for AI
                    const analysisInstruction = generateAnalysisInstruction(params.projectPath, params.projectName);
                    // Generate basic update instruction
                    const updateInstruction = generateUpdateInstruction(join(params.projectPath, 'agent-context'));
                    // Generate persistence setup instructions
                    const persistenceInstruction = generatePersistenceChecklistInstructions(params.projectPath, params.projectName);
                    const response = `${result.message}

📁 Created files:
${result.filesCreated.map(f => `  - ${f}`).join('\n')}

📋 ORCHESTRATION WORKFLOW FOR AI AGENT:

═══════════════════════════════════════════════════════════════

STEP 1: CODEBASE ANALYSIS
${analysisInstruction.instruction}

═══════════════════════════════════════════════════════════════

STEP 2: TEMPLATE UPDATES
${updateInstruction.instruction}

═══════════════════════════════════════════════════════════════

STEP 3: SET UP CONTEXT PERSISTENCE
${persistenceInstruction.instruction}

═══════════════════════════════════════════════════════════════

⚠️ ORCHESTRATION REQUIREMENTS:
1. Complete analysis in the order provided
2. Collect REAL examples from actual code files
3. NO placeholders should remain in templates
4. Every section must have project-specific data
5. Include file paths and line numbers for examples
6. Set up ALL 6 persistence layers to ensure context auto-loads

🎯 SUCCESS CRITERIA: 
- 100% of context files marked COMPLETE with 0 placeholders
- All 6 persistence layers implemented and validated
- Context automatically loads in all AI tools

The agent-context files are now ready for your comprehensive updates!`;
                    return {
                        content: [{
                                type: 'text',
                                text: response
                            }]
                    };
                }
                case 'check_before_suggesting': {
                    const params = z.object({
                        imports: z.array(z.string()),
                        methods: z.array(z.string()),
                        patterns: z.array(z.string()).optional(),
                    }).parse(args);
                    const instruction = generateDependencyCheckInstruction(params.imports, params.methods, params.patterns);
                    return {
                        content: [{
                                type: 'text',
                                text: instruction.instruction
                            }]
                    };
                }
                case 'validate_generated_code': {
                    const params = z.object({
                        code: z.string(),
                        context: z.string(),
                        targetFile: z.string().optional(),
                    }).parse(args);
                    const instruction = generateCodeValidationInstruction(params.code, params.context, params.targetFile);
                    return {
                        content: [{
                                type: 'text',
                                text: instruction.instruction
                            }]
                    };
                }
                case 'get_pattern_for_task': {
                    const params = z.object({
                        taskType: z.enum(['component', 'hook', 'service', 'api', 'test', 'error-handling']),
                        requirements: z.array(z.string()).optional(),
                    }).parse(args);
                    const instruction = generatePatternInstruction(params.taskType, params.requirements);
                    return {
                        content: [{
                                type: 'text',
                                text: instruction.instruction
                            }]
                    };
                }
                case 'track_agent_performance': {
                    const params = z.object({
                        featureName: z.string(),
                        timestamp: z.string(),
                        metrics: z.object({
                            tokensUsed: z.number(),
                            timeElapsed: z.number(),
                            validationScore: z.number(),
                            securityScore: z.number(),
                            testCoverage: z.number(),
                            hallucinations: z.object({
                                detected: z.number(),
                                prevented: z.number(),
                                examples: z.array(z.string())
                            }).optional(),
                            errors: z.object({
                                syntax: z.number(),
                                runtime: z.number(),
                                type: z.number()
                            }).optional()
                        })
                    }).parse(args);
                    // Store performance metrics (in real implementation, this would persist)
                    const performanceLog = {
                        feature: params.featureName,
                        timestamp: params.timestamp,
                        metrics: params.metrics,
                        improvement: calculateImprovement(params.metrics)
                    };
                    // Update AGENT-MEMORY.md if it exists
                    try {
                        updateAgentMemory(performanceLog);
                    }
                    catch (e) {
                        // Ignore if file doesn't exist
                    }
                    const response = `📊 Performance Tracked for: ${params.featureName}

**Metrics Summary:**
- Tokens Used: ${params.metrics.tokensUsed}
- Time Elapsed: ${params.metrics.timeElapsed}ms
- Validation Score: ${params.metrics.validationScore}/100
- Security Score: ${params.metrics.securityScore}/100
- Test Coverage: ${params.metrics.testCoverage}%

**Quality Assessment:**
- Overall Score: ${calculateOverallScore(params.metrics)}/100
- Performance Rating: ${getPerformanceRating(params.metrics)}
- Efficiency: ${calculateEfficiency(params.metrics)}

${params.metrics.hallucinations ? `
**Hallucination Prevention:**
- Detected: ${params.metrics.hallucinations.detected}
- Prevented: ${params.metrics.hallucinations.prevented}
- Success Rate: ${calculateHallucinationRate(params.metrics.hallucinations)}%
` : ''}

✅ Performance data recorded for continuous improvement.`;
                    return {
                        content: [{
                                type: 'text',
                                text: response
                            }]
                    };
                }
                case 'validate_context_completeness': {
                    const params = z.object({
                        contextPath: z.string(),
                        expectedCompleteness: z.number().default(100),
                    }).parse(args);
                    const response = `📋 Context Completeness Validation

Please validate that all agent-context templates are complete:

1. **Check ALL files in ${params.contextPath}**:
   - AGENT-CONTEXT.md
   - AGENT-MEMORY.md  
   - AGENT-CODING-TEMPLATE.md

2. **Validation Criteria**:
   - Count all {{PLACEHOLDER}} values remaining
   - Verify all sections have real project data
   - Confirm no generic examples remain
   - Check that file paths and line numbers are accurate

3. **Report**:
   - Total placeholders found: X
   - Files with incomplete sections: [list]
   - Overall completeness percentage: X%

⚠️ IMPORTANT: 
- Check EVERY file in ${params.contextPath}
- Report the exact count of placeholders found
- List specific missing sections
- Provide a completeness percentage for each file

Expected completeness: ${params.expectedCompleteness}%

Run this validation after completing all update phases to ensure 100% effectiveness.`;
                    return {
                        content: [{
                                type: 'text',
                                text: response
                            }]
                    };
                }
                case 'figma_to_code': {
                    const params = z.object({
                        componentName: z.string().optional(),
                        targetFramework: z.enum(['react', 'vue', 'angular']).optional(),
                        targetLanguage: z.enum(['typescript', 'javascript']).optional().default('typescript'),
                        styling: z.enum(['tailwind', 'css-modules', 'styled-components', 'css']).optional().default('tailwind'),
                        extractionMode: z.enum(['precise', 'adaptive']).optional().default('precise'),
                        includeResponsive: z.boolean().optional().default(true),
                        includeAccessibility: z.boolean().optional().default(true),
                        includeTests: z.boolean().optional().default(false),
                        processChildren: z.boolean().optional().default(true),
                        processingStrategy: z.enum(['depth-first', 'breadth-first']).optional().default('depth-first'),
                        componentFilter: z.object({
                            types: z.array(z.string()).optional(),
                            maxDepth: z.number().optional(),
                            excludePatterns: z.array(z.string()).optional()
                        }).optional(),
                        useProductionMode: z.boolean().optional().default(true)
                    }).parse(args);
                    // Use provided values or defaults
                    const componentName = params.componentName || '[Selected Component in Figma]';
                    const framework = params.targetFramework || 'react';
                    const language = params.targetLanguage;
                    const styling = params.styling;
                    // Check if production mode is requested
                    if (params.useProductionMode) {
                        // Return the streamlined production-ready instruction
                        const productionInstruction = generateProductionReadyInstruction();
                        return {
                            content: [{
                                    type: 'text',
                                    text: productionInstruction
                                }]
                        };
                    }
                    // Otherwise, generate complete orchestration workflow
                    const figmaInstructions = generateCompleteFigmaWorkflow({
                        componentName,
                        framework,
                        language,
                        styling,
                        processChildren: params.processChildren,
                        processingStrategy: params.processingStrategy,
                        componentFilter: params.componentFilter
                    });
                    return {
                        content: [{
                                type: 'text',
                                text: figmaInstructions
                            }]
                    };
                }
                default:
                    throw new Error(`Unknown tool: ${name}`);
            }
        }
        catch (error) {
            throw new Error(`Tool execution failed: ${error}`);
        }
    });
}
// Helper functions for performance tracking
function calculateOverallScore(metrics) {
    const scores = [
        metrics.validationScore,
        metrics.securityScore,
        metrics.testCoverage
    ];
    return Math.round(scores.reduce((a, b) => a + b, 0) / scores.length);
}
function getPerformanceRating(metrics) {
    const score = calculateOverallScore(metrics);
    if (score >= 90)
        return '🌟 Excellent';
    if (score >= 80)
        return '✅ Good';
    if (score >= 70)
        return '⚠️ Needs Improvement';
    return '❌ Poor';
}
function calculateEfficiency(metrics) {
    const tokensPerMinute = (metrics.tokensUsed / metrics.timeElapsed) * 60000;
    if (tokensPerMinute < 1000)
        return '⚡ Very Efficient';
    if (tokensPerMinute < 2000)
        return '✅ Efficient';
    if (tokensPerMinute < 3000)
        return '⚠️ Average';
    return '🐌 Inefficient';
}
function calculateHallucinationRate(hallucinations) {
    const total = hallucinations.detected + hallucinations.prevented;
    if (total === 0)
        return 100;
    return Math.round((hallucinations.prevented / total) * 100);
}
function calculateImprovement(metrics) {
    // In real implementation, compare with historical data
    return 'First measurement - baseline established';
}
function updateAgentMemory(performanceLog) {
    // In real implementation, this would update the AGENT-MEMORY.md file
    // For now, we'll just log it
    console.log('Performance logged:', performanceLog);
}
//# sourceMappingURL=index.js.map