/**
 * Persistence Instructions for Context Auto-Loading
 * Version 4.2.0 - Ensures context persists across AI conversations
 */
/**
 * Generate comprehensive persistence setup checklist
 */
export function generatePersistenceChecklistInstructions(projectPath, projectName) {
    return {
        type: 'SETUP_PERSISTENCE',
        projectPath,
        projectName,
        instruction: `
## ✅ CONTEXT PERSISTENCE SETUP CHECKLIST

You MUST complete ALL items to ensure AI context persists across conversations.
This is MANDATORY for the project's entire lifecycle.

### 📋 OVERVIEW
Set up 6 layers of persistence to ensure context is ALWAYS loaded, regardless of:
- New conversations
- Different AI tools (Cursor, Claude, ChatGPT, Copilot)
- Team member changes
- Git operations

### ⚡ LAYER 1: MCP Configuration (.context7.yaml)
- [ ] Open agent-context/.context7.yaml
- [ ] Add/update these settings:
  \`\`\`yaml
  version: "1.0"
  project: "${projectName}"
  updated: "[CURRENT_ISO_TIMESTAMP]"
  
  # Auto-loading configuration
  auto_load:
    enabled: true
    files:
      - "CODEBASE-CONTEXT.md"
      - "AGENT-CONTEXT.md"
      - "AGENT-CODING-TEMPLATE.md"
      - "AGENT-MEMORY.md"
    priority: "mandatory"
  
  # Add any migration rules if applicable
  migrations:
    active: [true/false based on analysis]
    from: "[OLD_LIBRARY_IF_ANY]"
    to: "[NEW_LIBRARY_IF_ANY]"
    blocked_suggestions: ["[OLD_LIBRARY_COMPONENTS]"]
  \`\`\`
- [ ] Save the file

### 🖱️ LAYER 2: IDE Rules (.cursorrules)
- [ ] Create ${projectPath}/.cursorrules file
- [ ] Add this content (adapt based on project analysis):
  \`\`\`
  # Cursor Rules for ${projectName}
  
  ## MANDATORY: Context Loading
  Before making ANY suggestion, you MUST:
  1. Check if agent-context/ exists
  2. Load ALL files from agent-context/
  3. Verify no placeholders remain
  
  If context is missing:
  - STOP immediately
  - Alert: "❌ AI Context not loaded! Run: pnpm ai:ready"
  - Do NOT make suggestions without context
  
  ## Project Constraints
  [POPULATE_FROM_ANALYSIS]
  - Framework: [DETECTED_FRAMEWORK]
  - UI Library: [DETECTED_UI]
  - State Management: [DETECTED_STATE]
  - Testing: [DETECTED_TESTING]
  
  ## Forbidden Patterns
  [POPULATE_FROM_ANALYSIS]
  - Never suggest deprecated patterns
  - Block any removed dependencies
  [ADD_MIGRATION_RULES_IF_FOUND]
  
  ## Recovery Procedure
  If context is stale or missing:
  1. Run: pnpm ai:ready
  2. Reload agent-context files
  3. Verify updates loaded
  \`\`\`
- [ ] Save the file

### 📖 LAYER 3: Universal Instructions (AI-AGENT-README.md)
- [ ] Create ${projectPath}/AI-AGENT-README.md
- [ ] Add this content:
  \`\`\`markdown
  # 🤖 AI AGENT INSTRUCTIONS - ${projectName}
  
  **⚠️ CRITICAL: READ THIS FIRST BEFORE ANY AI ASSISTANCE ⚠️**
  
  ## 🚨 Mandatory Context Loading
  
  This project has AI context that MUST be loaded before any work:
  
  ### For Cursor AI
  - Context auto-loads via .cursorrules
  - If missing, run: \`pnpm ai:ready\`
  
  ### For Claude/ChatGPT
  1. First run: \`pnpm ai:ready\`
  2. Then load:
     \`\`\`bash
     cat agent-context/CODEBASE-CONTEXT.md
     cat agent-context/AGENT-CONTEXT.md
     cat agent-context/AGENT-CODING-TEMPLATE.md
     \`\`\`
  
  ### For GitHub Copilot
  1. Open VS Code
  2. Run: \`code agent-context/\`
  3. Keep context files open while coding
  
  ## 🎯 Project Overview
  [POPULATE_FROM_ANALYSIS]
  - Name: ${projectName}
  - Type: [PROJECT_TYPE]
  - Stack: [TECH_STACK]
  - Status: [ACTIVE/MIGRATION/etc]
  
  ## ⚡ Quick Commands
  - \`pnpm ai:ready\` - Validate AI context is ready
  - \`pnpm context:check\` - Check if context exists
  - \`pnpm ai:help\` - Show this help
  
  ## 🔴 Without Context Loading
  - ❌ AI will hallucinate dependencies
  - ❌ Suggest wrong patterns
  - ❌ Break architectural decisions
  - ❌ Introduce security issues
  
  **ALWAYS LOAD CONTEXT FIRST!**
  \`\`\`
- [ ] Save the file

### 📦 LAYER 4: Package.json Scripts
- [ ] Open ${projectPath}/package.json
- [ ] Add these scripts to the "scripts" section:
  \`\`\`json
  "ai:ready": "npm run context:check && npm run context:validate && echo '✅ AI Context Ready for ${projectName}!'",
  "context:check": "test -d agent-context && echo '✓ Context directory exists' || (echo '✗ Context missing - run MCP initialize_agent_workspace' && exit 1)",
  "context:validate": "test -z \\"$(find agent-context -name '*.md' -exec grep -l 'TO BE' {} +)\\" && echo '✓ No placeholders found' || (echo '✗ Placeholders remain - update context files!' && exit 1)",
  "ai:help": "test -f AI-AGENT-README.md && cat AI-AGENT-README.md || echo 'AI instructions not found'",
  "context:load": "test -f agent-context/CODEBASE-CONTEXT.md && cat agent-context/CODEBASE-CONTEXT.md || echo 'Context not found'"
  \`\`\`
- [ ] Save package.json

### 🔧 LAYER 5: VS Code Settings
- [ ] Create/update ${projectPath}/.vscode/settings.json
- [ ] Add these settings:
  \`\`\`json
  {
    "files.associations": {
      "*.context.md": "markdown",
      "AGENT-*.md": "markdown",
      ".cursorrules": "markdown"
    },
    "ai-context": {
      "autoLoad": true,
      "contextFiles": [
        "agent-context/CODEBASE-CONTEXT.md",
        "agent-context/AGENT-CONTEXT.md",
        "agent-context/AGENT-CODING-TEMPLATE.md"
      ]
    },
    "project.name": "${projectName}",
    "project.description": "[FROM_ANALYSIS]",
    "project.aiContextEnabled": true
  }
  \`\`\`
- [ ] Save the file

### 🔄 LAYER 6: Git Hooks
- [ ] Create directory: ${projectPath}/.githooks
- [ ] Create file: ${projectPath}/.githooks/post-merge
- [ ] Add this content:
  \`\`\`bash
  #!/bin/bash
  
  # Check if agent-context files were updated
  CONTEXT_UPDATED=$(git diff HEAD@{1} --name-only | grep -E "agent-context/.*\\.md$" | wc -l)
  
  if [ "$CONTEXT_UPDATED" -gt 0 ]; then
    echo ""
    echo "════════════════════════════════════════════════════════════"
    echo "🤖 AI CONTEXT FILES UPDATED!"
    echo "════════════════════════════════════════════════════════════"
    echo ""
    echo "   The agent-context files have been modified."
    echo "   Please refresh your AI agent context:"
    echo ""
    echo "   • Cursor: Restart Cursor or reload window"
    echo "   • Claude/ChatGPT: Re-run context loading"
    echo "   • Copilot: Reopen context files"
    echo ""
    echo "   Run: pnpm ai:ready"
    echo ""
    echo "════════════════════════════════════════════════════════════"
    echo ""
  fi
  \`\`\`
- [ ] Make executable: Run \`chmod +x ${projectPath}/.githooks/post-merge\`
- [ ] Configure git: Run \`cd ${projectPath} && git config core.hooksPath .githooks\`

### ✅ VALIDATION CHECKLIST
- [ ] Run: \`cd ${projectPath} && npm run ai:ready\`
- [ ] Verify output shows "✅ AI Context Ready"
- [ ] Check .cursorrules exists and has content
- [ ] Check AI-AGENT-README.md exists
- [ ] Verify all package.json scripts work
- [ ] Confirm VS Code settings created
- [ ] Test git hook (create test commit)

### 📊 SUCCESS CRITERIA
✓ All 6 persistence layers implemented
✓ \`pnpm ai:ready\` returns success
✓ No placeholders in any file
✓ Git hooks are executable
✓ Context auto-loads in Cursor

### 🎯 FINAL STEP
Add a note to agent-context/AGENT-MEMORY.md:
\`\`\`markdown
## Context Persistence Setup
- Date: [CURRENT_DATE]
- Version: 4.2.0
- Status: ✅ All 6 layers implemented
- Auto-loading: Enabled
- Validation: pnpm ai:ready
\`\`\`

⚠️ This checklist is MANDATORY. Do not skip any items!
`.trim()
    };
}
/**
 * Generate .cursorrules template based on project analysis
 */
export function generateCursorRulesTemplate(projectName, techStack) {
    const migrationRules = techStack.migrationFrom ? `
## Migration Rules
- NEVER suggest ${techStack.migrationFrom} components or patterns
- ALWAYS use ${techStack.migrationTo} for new components
- Flag any ${techStack.migrationFrom} imports as deprecated
- Suggest migration path when encountering old patterns` : '';
    return `# Cursor Rules for ${projectName}

## MANDATORY: Context Loading Protocol

### Before ANY Code Suggestion:
1. **Check Context**: Verify agent-context/ directory exists
2. **Load Files**: Read ALL files in agent-context/
3. **Validate**: Ensure no [TO BE...] placeholders remain
4. **Confirm**: Tech stack matches project reality

### If Context Missing:
\`\`\`
❌ STOP! AI Context not loaded!
   Run: pnpm ai:ready
   Then reload context files
\`\`\`

## Project Configuration

### Technology Stack
- **Language**: ${techStack.language}
- **Framework**: ${techStack.framework || 'None'}
- **UI Library**: ${techStack.ui || 'None'}
- **State Management**: ${techStack.state || 'None'}
- **Testing**: ${techStack.testing || 'None'}
${migrationRules}

## Enforced Patterns
Based on codebase analysis in CODEBASE-CONTEXT.md:
- Component style: Follow detected patterns
- Import style: Match project conventions
- File naming: Use existing conventions
- State management: Follow documented approach

## Forbidden Actions
- ❌ Suggesting packages not in package.json
- ❌ Using deprecated APIs for current versions
- ❌ Introducing new patterns without discussion
- ❌ Ignoring established conventions
${techStack.migrationFrom ? `- ❌ Using any ${techStack.migrationFrom} components` : ''}

## Quality Checks
Before presenting code:
1. ✓ Follows patterns in CODEBASE-CONTEXT.md
2. ✓ Uses only verified dependencies
3. ✓ Matches project's error handling
4. ✓ Includes appropriate types (if TypeScript)
5. ✓ Follows security patterns

## Recovery Procedures

### Context Out of Sync:
\`\`\`bash
# Update context
pnpm ai:ready

# Reload in Cursor
Cmd/Ctrl + Shift + P → "Developer: Reload Window"
\`\`\`

### Missing Dependencies:
1. Check package.json first
2. Verify version compatibility
3. Never assume availability

### Pattern Uncertainty:
1. Check CODEBASE-CONTEXT.md
2. Look for similar code in project
3. Ask user before introducing new patterns

## Context File Priority
1. **CODEBASE-CONTEXT.md** - Technical truth
2. **AGENT-CODING-TEMPLATE.md** - How to code
3. **AGENT-CONTEXT.md** - Current session
4. **ADRs** - Architectural decisions

---
Generated by MCP Context Manager v4.2.0
Project: ${projectName}
Remember: ALWAYS load context before coding!`;
}
/**
 * Generate AI-AGENT-README.md template
 */
export function generateAIAgentReadmeTemplate(projectName, projectType, techStack) {
    const timestamp = new Date().toISOString();
    return `# 🤖 AI AGENT INSTRUCTIONS - ${projectName}

**⚠️ CRITICAL: READ THIS FIRST BEFORE ANY AI ASSISTANCE ⚠️**

Generated: ${timestamp}

## 🚨 Mandatory Context Loading

This project uses MCP Context Manager for AI-friendly documentation.
Context MUST be loaded before ANY development work.

### 🎯 Quick Start

\`\`\`bash
# Validate context is ready
pnpm ai:ready

# If validation fails, initialize:
# Use MCP tool: initialize_agent_workspace
\`\`\`

## 🛠️ Tool-Specific Instructions

### Cursor AI 🎯
- **Auto-loads** via \`.cursorrules\`
- If issues: \`Cmd/Ctrl + Shift + P\` → "Reload Window"
- Verify bottom status bar shows "Context Loaded"

### Claude Desktop 🤖
1. Ensure MCP server configured
2. Run: \`pnpm ai:ready\`
3. Use: "Load context from agent-context folder"

### ChatGPT 💬
\`\`\`bash
# Load context files
cat agent-context/CODEBASE-CONTEXT.md
cat agent-context/AGENT-CONTEXT.md
cat agent-context/AGENT-CODING-TEMPLATE.md
\`\`\`

### GitHub Copilot 🤝
1. Open VS Code: \`code .\`
2. Open context: \`code agent-context/\`
3. Keep context files in tabs while coding

### Other AI Tools 🔧
1. Run: \`pnpm context:load\`
2. Copy output to AI tool
3. Verify AI acknowledges context

## 📋 Project Overview

- **Name**: ${projectName}
- **Type**: ${projectType}
- **Stack**: ${techStack}
- **Context Version**: 4.2.0
- **Auto-loading**: Enabled

## ⚡ Essential Commands

| Command | Purpose |
|---------|---------|
| \`pnpm ai:ready\` | Validate AI context is ready |
| \`pnpm context:check\` | Check if context exists |
| \`pnpm context:validate\` | Validate no placeholders |
| \`pnpm ai:help\` | Show this help |
| \`pnpm context:load\` | Display main context |

## 🔴 Consequences of Skipping Context

Without loading context, AI will:
- ❌ **Hallucinate** dependencies that don't exist
- ❌ **Suggest** incompatible patterns
- ❌ **Break** architectural decisions
- ❌ **Introduce** security vulnerabilities
- ❌ **Ignore** business domain requirements
- ❌ **Violate** coding standards

## 🔄 Keeping Context Fresh

### After Git Pull/Merge:
\`\`\`bash
git pull
pnpm ai:ready  # Always run after pulling
\`\`\`

### After Major Changes:
1. Update agent-context files
2. Run validation
3. Reload in AI tool

### Weekly Maintenance:
- Review AGENT-MEMORY.md for learnings
- Update patterns if evolved
- Check for context drift

## 📁 Context Structure

\`\`\`
agent-context/
├── CODEBASE-CONTEXT.md    # Tech stack, patterns, conventions
├── AGENT-CONTEXT.md       # Current session tracking
├── AGENT-CODING-TEMPLATE.md # Coding guidelines
├── AGENT-MEMORY.md        # Persistent learnings
├── .context7.yaml         # Configuration
└── adr/                   # Architecture decisions
    ├── 001-use-adr.md
    ├── 002-tech-stack-selection.md
    └── 003-code-patterns.md
\`\`\`

## 🚨 Emergency Procedures

### Context Not Loading:
1. Run: \`pnpm ai:ready\`
2. Check for errors
3. Re-initialize if needed

### Validation Fails:
1. Check for [TO BE...] placeholders
2. Update incomplete sections
3. Re-run validation

### AI Making Wrong Suggestions:
1. Stop immediately
2. Reload context
3. Verify AI acknowledges update

## 🏆 Best Practices

1. **Always** run \`pnpm ai:ready\` before starting work
2. **Never** skip context loading "just this once"
3. **Update** context when patterns change
4. **Commit** context changes with code
5. **Share** context updates with team

---

**Remember**: AI without context is like a developer without documentation - dangerous!

**ALWAYS LOAD CONTEXT FIRST!** 🎯`;
}
/**
 * Generate VS Code settings for AI context
 */
export function generateVSCodeSettingsTemplate(projectName, description) {
    return `{
  "files.associations": {
    "*.context.md": "markdown",
    "AGENT-*.md": "markdown",
    "CODEBASE-*.md": "markdown",
    ".cursorrules": "markdown",
    ".context7.yaml": "yaml"
  },
  
  "ai-context": {
    "enabled": true,
    "autoLoad": true,
    "contextFiles": [
      "agent-context/CODEBASE-CONTEXT.md",
      "agent-context/AGENT-CONTEXT.md",
      "agent-context/AGENT-CODING-TEMPLATE.md",
      "agent-context/AGENT-MEMORY.md"
    ],
    "validation": {
      "checkOnStartup": true,
      "warnOnPlaceholders": true
    }
  },
  
  "project.name": "${projectName}",
  "project.description": "${description}",
  "project.aiContextEnabled": true,
  "project.contextVersion": "4.2.0",
  
  "github.copilot.advanced": {
    "contextualDocumentation": {
      "enabled": true,
      "paths": ["agent-context/"]
    }
  },
  
  "search.exclude": {
    "**/node_modules": true,
    "**/dist": true,
    "**/.git": true
  },
  
  "files.watcherExclude": {
    "**/node_modules/**": true,
    "**/dist/**": true
  }
}`;
}
/**
 * Generate git hook for context updates
 */
export function generateGitHookTemplate(projectName) {
    return `#!/bin/bash
# Git hook for ${projectName} - AI Context Update Notifications

# Color codes
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m' # No Color

# Check if agent-context files were updated
CONTEXT_UPDATED=$(git diff HEAD@{1} --name-only 2>/dev/null | grep -E "agent-context/.*\\.(md|yaml)$" | wc -l)
CURSORRULES_UPDATED=$(git diff HEAD@{1} --name-only 2>/dev/null | grep -E "^\\.cursorrules$" | wc -l)
AI_README_UPDATED=$(git diff HEAD@{1} --name-only 2>/dev/null | grep -E "^AI-AGENT-README\\.md$" | wc -l)

TOTAL_UPDATES=$((CONTEXT_UPDATED + CURSORRULES_UPDATED + AI_README_UPDATED))

if [ "$TOTAL_UPDATES" -gt 0 ]; then
  echo ""
  echo -e "\${BLUE}════════════════════════════════════════════════════════════\${NC}"
  echo -e "\${YELLOW}🤖 AI CONTEXT FILES UPDATED!\${NC}"
  echo -e "\${BLUE}════════════════════════════════════════════════════════════\${NC}"
  echo ""
  
  if [ "$CONTEXT_UPDATED" -gt 0 ]; then
    echo -e "   \${GREEN}✓\${NC} Agent context files modified"
  fi
  
  if [ "$CURSORRULES_UPDATED" -gt 0 ]; then
    echo -e "   \${GREEN}✓\${NC} Cursor rules updated"
  fi
  
  if [ "$AI_README_UPDATED" -gt 0 ]; then
    echo -e "   \${GREEN}✓\${NC} AI instructions updated"
  fi
  
  echo ""
  echo -e "   \${YELLOW}Please refresh your AI agent context:\${NC}"
  echo ""
  echo -e "   • \${BLUE}Cursor:\${NC} Restart or reload window (Cmd/Ctrl+Shift+P → Reload)"
  echo -e "   • \${BLUE}Claude:\${NC} Re-run context loading commands"
  echo -e "   • \${BLUE}ChatGPT:\${NC} Reload context files"
  echo -e "   • \${BLUE}Copilot:\${NC} Reopen context files in VS Code"
  echo ""
  echo -e "   \${GREEN}Run:\${NC} pnpm ai:ready"
  echo ""
  echo -e "\${BLUE}════════════════════════════════════════════════════════════\${NC}"
  echo ""
fi

# Always exit successfully to not block git operations
exit 0`;
}
/**
 * Generate package.json scripts instructions
 */
export function generatePackageScriptsInstructions(projectName) {
    return `
## Adding AI Context Scripts to package.json

Add these scripts to the "scripts" section:

\`\`\`json
"ai:ready": "npm run context:check && npm run context:validate && echo '✅ AI Context Ready for ${projectName}!'",
"context:check": "test -d agent-context && echo '✓ Context directory exists' || (echo '✗ Context missing - run MCP initialize_agent_workspace' && exit 1)",
"context:validate": "test -z \\"$(find agent-context -name '*.md' -exec grep -l 'TO BE' {} + 2>/dev/null)\\" && echo '✓ No placeholders found' || (echo '✗ Placeholders remain - update context files!' && exit 1)",
"ai:help": "test -f AI-AGENT-README.md && cat AI-AGENT-README.md || echo 'AI instructions not found'",
"context:load": "test -f agent-context/CODEBASE-CONTEXT.md && cat agent-context/CODEBASE-CONTEXT.md || echo 'Context not found'",
"context:refresh": "echo 'Refreshing AI context...' && npm run context:validate && echo 'Context refreshed!'",
"postinstall": "npm run context:check 2>/dev/null || echo 'Run initialize_agent_workspace to set up AI context'"
\`\`\`

These scripts provide:
- **ai:ready**: Complete validation that context is ready
- **context:check**: Verify context directory exists
- **context:validate**: Ensure no placeholders remain
- **ai:help**: Display AI usage instructions
- **context:load**: Output main context file
- **context:refresh**: Refresh and validate context
- **postinstall**: Reminder after npm install
`.trim();
}
//# sourceMappingURL=persistence-instructions.js.map