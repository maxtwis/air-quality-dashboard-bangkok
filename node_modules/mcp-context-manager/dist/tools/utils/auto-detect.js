import { promises as fs } from 'fs';
import { join } from 'path';
export async function detectFramework(projectPath) {
    try {
        // Check package.json for framework dependencies
        const packageJsonPath = join(projectPath, 'package.json');
        const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));
        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
        // React
        if (deps.react)
            return 'React';
        // Vue
        if (deps.vue)
            return 'Vue';
        // Angular
        if (deps['@angular/core'])
            return 'Angular';
        // Next.js
        if (deps.next)
            return 'Next.js';
        // Nuxt
        if (deps.nuxt)
            return 'Nuxt';
        // Svelte
        if (deps.svelte)
            return 'Svelte';
        // Express
        if (deps.express)
            return 'Express';
        // Fastify
        if (deps.fastify)
            return 'Fastify';
        // NestJS
        if (deps['@nestjs/core'])
            return 'NestJS';
        return 'Unknown';
    }
    catch {
        return 'Unknown';
    }
}
export async function detectLanguage(projectPath) {
    try {
        // Check for TypeScript
        const tsconfigPath = join(projectPath, 'tsconfig.json');
        try {
            await fs.access(tsconfigPath);
            return 'TypeScript';
        }
        catch {
            // Not TypeScript
        }
        // Check package.json
        const packageJsonPath = join(projectPath, 'package.json');
        try {
            const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));
            const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
            if (deps.typescript || deps['@types/node']) {
                return 'TypeScript';
            }
            return 'JavaScript';
        }
        catch {
            // No package.json
        }
        // Check for other language files
        const files = await fs.readdir(projectPath);
        if (files.some(f => f.endsWith('.py')))
            return 'Python';
        if (files.some(f => f.endsWith('.rs')))
            return 'Rust';
        if (files.some(f => f.endsWith('.go')))
            return 'Go';
        if (files.some(f => f.endsWith('.java')))
            return 'Java';
        if (files.some(f => f.endsWith('.rb')))
            return 'Ruby';
        if (files.some(f => f.endsWith('.php')))
            return 'PHP';
        return 'Unknown';
    }
    catch {
        return 'Unknown';
    }
}
export async function detectPatterns(projectPath) {
    const patterns = [];
    try {
        // Check for common patterns in package.json
        const packageJsonPath = join(projectPath, 'package.json');
        const packageJson = JSON.parse(await fs.readFile(packageJsonPath, 'utf-8'));
        const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
        // State management
        if (deps.redux || deps['@reduxjs/toolkit'])
            patterns.push('Redux');
        if (deps.zustand)
            patterns.push('Zustand');
        if (deps.mobx)
            patterns.push('MobX');
        if (deps.recoil)
            patterns.push('Recoil');
        // Styling
        if (deps.tailwindcss)
            patterns.push('Tailwind CSS');
        if (deps['styled-components'])
            patterns.push('Styled Components');
        if (deps.emotion || deps['@emotion/react'])
            patterns.push('Emotion');
        if (deps.sass || deps['node-sass'])
            patterns.push('SASS/SCSS');
        // Testing
        if (deps.jest)
            patterns.push('Jest');
        if (deps.vitest)
            patterns.push('Vitest');
        if (deps.mocha)
            patterns.push('Mocha');
        if (deps['@testing-library/react'])
            patterns.push('React Testing Library');
        if (deps.cypress)
            patterns.push('Cypress');
        if (deps.playwright)
            patterns.push('Playwright');
        // Build tools
        if (deps.vite)
            patterns.push('Vite');
        if (deps.webpack)
            patterns.push('Webpack');
        if (deps.rollup)
            patterns.push('Rollup');
        if (deps.esbuild)
            patterns.push('ESBuild');
        // API
        if (deps.axios)
            patterns.push('Axios');
        if (deps['@tanstack/react-query'])
            patterns.push('React Query');
        if (deps.swr)
            patterns.push('SWR');
        if (deps.graphql)
            patterns.push('GraphQL');
        // Check for config files
        const files = await fs.readdir(projectPath);
        if (files.includes('.eslintrc.js') || files.includes('.eslintrc.json')) {
            patterns.push('ESLint');
        }
        if (files.includes('.prettierrc') || files.includes('prettier.config.js')) {
            patterns.push('Prettier');
        }
        if (files.includes('docker-compose.yml') || files.includes('Dockerfile')) {
            patterns.push('Docker');
        }
    }
    catch {
        // Error reading files
    }
    return patterns.length > 0 ? patterns : ['Standard patterns'];
}
//# sourceMappingURL=auto-detect.js.map